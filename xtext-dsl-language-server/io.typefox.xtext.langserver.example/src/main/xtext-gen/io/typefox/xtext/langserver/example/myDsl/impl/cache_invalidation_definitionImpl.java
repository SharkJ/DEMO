/**
 * generated by Xtext 2.13.0
 */
package io.typefox.xtext.langserver.example.myDsl.impl;

import io.typefox.xtext.langserver.example.myDsl.MyDslPackage;
import io.typefox.xtext.langserver.example.myDsl.cache_invalidation_after;
import io.typefox.xtext.langserver.example.myDsl.cache_invalidation_definition;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>cache invalidation definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.typefox.xtext.langserver.example.myDsl.impl.cache_invalidation_definitionImpl#getCache_invalidation_after <em>Cache invalidation after</em>}</li>
 * </ul>
 *
 * @generated
 */
public class cache_invalidation_definitionImpl extends MinimalEObjectImpl.Container implements cache_invalidation_definition
{
  /**
   * The cached value of the '{@link #getCache_invalidation_after() <em>Cache invalidation after</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCache_invalidation_after()
   * @generated
   * @ordered
   */
  protected cache_invalidation_after cache_invalidation_after;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected cache_invalidation_definitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.CACHE_INVALIDATION_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cache_invalidation_after getCache_invalidation_after()
  {
    return cache_invalidation_after;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCache_invalidation_after(cache_invalidation_after newCache_invalidation_after, NotificationChain msgs)
  {
    cache_invalidation_after oldCache_invalidation_after = cache_invalidation_after;
    cache_invalidation_after = newCache_invalidation_after;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER, oldCache_invalidation_after, newCache_invalidation_after);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCache_invalidation_after(cache_invalidation_after newCache_invalidation_after)
  {
    if (newCache_invalidation_after != cache_invalidation_after)
    {
      NotificationChain msgs = null;
      if (cache_invalidation_after != null)
        msgs = ((InternalEObject)cache_invalidation_after).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER, null, msgs);
      if (newCache_invalidation_after != null)
        msgs = ((InternalEObject)newCache_invalidation_after).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER, null, msgs);
      msgs = basicSetCache_invalidation_after(newCache_invalidation_after, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER, newCache_invalidation_after, newCache_invalidation_after));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER:
        return basicSetCache_invalidation_after(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER:
        return getCache_invalidation_after();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER:
        setCache_invalidation_after((cache_invalidation_after)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER:
        setCache_invalidation_after((cache_invalidation_after)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER:
        return cache_invalidation_after != null;
    }
    return super.eIsSet(featureID);
  }

} //cache_invalidation_definitionImpl
