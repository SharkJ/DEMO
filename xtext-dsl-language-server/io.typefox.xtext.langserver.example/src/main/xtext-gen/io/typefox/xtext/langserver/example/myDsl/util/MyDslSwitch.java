/**
 * generated by Xtext 2.13.0
 */
package io.typefox.xtext.langserver.example.myDsl.util;

import io.typefox.xtext.langserver.example.myDsl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see io.typefox.xtext.langserver.example.myDsl.MyDslPackage
 * @generated
 */
public class MyDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyDslPackage.DOMAINMODEL:
      {
        Domainmodel domainmodel = (Domainmodel)theEObject;
        T result = caseDomainmodel(domainmodel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MAIN_ELEMENT:
      {
        MainElement mainElement = (MainElement)theEObject;
        T result = caseMainElement(mainElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PROJECTION_NAME:
      {
        projection_name projection_name = (projection_name)theEObject;
        T result = caseprojection_name(projection_name);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PROJECTION_COMPONENT:
      {
        projection_component projection_component = (projection_component)theEObject;
        T result = caseprojection_component(projection_component);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LAYER_SPECIFICATION:
      {
        layer_specification layer_specification = (layer_specification)theEObject;
        T result = caselayer_specification(layer_specification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DESCRIPTION:
      {
        description description = (description)theEObject;
        T result = casedescription(description);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CAPABILITY:
      {
        capability capability = (capability)theEObject;
        T result = casecapability(capability);
        if (result == null) result = caseMainElement(capability);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CATEGORY:
      {
        category category = (category)theEObject;
        T result = casecategory(category);
        if (result == null) result = caseMainElement(category);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SERVICE_GROUP:
      {
        service_group service_group = (service_group)theEObject;
        T result = caseservice_group(service_group);
        if (result == null) result = caseMainElement(service_group);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INCLUDE_FRAGMENT:
      {
        include_fragment include_fragment = (include_fragment)theEObject;
        T result = caseinclude_fragment(include_fragment);
        if (result == null) result = caseMainElement(include_fragment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OVERRIDE:
      {
        override override = (override)theEObject;
        T result = caseoverride(override);
        if (result == null) result = caseMainElement(override);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OVERTAKE:
      {
        overtake overtake = (overtake)theEObject;
        T result = caseovertake(overtake);
        if (result == null) result = caseMainElement(overtake);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENTITY_SET_DEFINITION:
      {
        entity_set_definition entity_set_definition = (entity_set_definition)theEObject;
        T result = caseentity_set_definition(entity_set_definition);
        if (result == null) result = caseMainElement(entity_set_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.WHERE_DEFINITION:
      {
        where_definition where_definition = (where_definition)theEObject;
        T result = casewhere_definition(where_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FILTERING_CONTEXT_LIST_DEFINITION:
      {
        filtering_context_list_definition filtering_context_list_definition = (filtering_context_list_definition)theEObject;
        T result = casefiltering_context_list_definition(filtering_context_list_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OFFLINE_FILTER_DEFINITION:
      {
        offline_filter_definition offline_filter_definition = (offline_filter_definition)theEObject;
        T result = caseoffline_filter_definition(offline_filter_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SINGLETON_SET_DEFINITION:
      {
        singleton_set_definition singleton_set_definition = (singleton_set_definition)theEObject;
        T result = casesingleton_set_definition(singleton_set_definition);
        if (result == null) result = caseMainElement(singleton_set_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPUTEDITEM_DEFINITION:
      {
        computeditem_definition computeditem_definition = (computeditem_definition)theEObject;
        T result = casecomputeditem_definition(computeditem_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPUTE_DEFINITION:
      {
        compute_definition compute_definition = (compute_definition)theEObject;
        T result = casecompute_definition(compute_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPUTE_EXPRESSION:
      {
        compute_expression compute_expression = (compute_expression)theEObject;
        T result = casecompute_expression(compute_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM:
      {
        compute_expression_atom compute_expression_atom = (compute_expression_atom)theEObject;
        T result = casecompute_expression_atom(compute_expression_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM_VALUE:
      {
        compute_expression_atom_value compute_expression_atom_value = (compute_expression_atom_value)theEObject;
        T result = casecompute_expression_atom_value(compute_expression_atom_value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DATASOURCE_DEFINITION:
      {
        datasource_definition datasource_definition = (datasource_definition)theEObject;
        T result = casedatasource_definition(datasource_definition);
        if (result == null) result = caseMainElement(datasource_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.KEY_FETCH_ON_CREATE_FLAG:
      {
        key_fetch_on_create_flag key_fetch_on_create_flag = (key_fetch_on_create_flag)theEObject;
        T result = casekey_fetch_on_create_flag(key_fetch_on_create_flag);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LUNAME_DEFINITION:
      {
        luname_definition luname_definition = (luname_definition)theEObject;
        T result = caseluname_definition(luname_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.KEYREF_DEFINITION:
      {
        keyref_definition keyref_definition = (keyref_definition)theEObject;
        T result = casekeyref_definition(keyref_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VALIDATE_ACTION_REFERENCE:
      {
        validate_action_reference validate_action_reference = (validate_action_reference)theEObject;
        T result = casevalidate_action_reference(validate_action_reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATEMACHINE_DEFINITION:
      {
        statemachine_definition statemachine_definition = (statemachine_definition)theEObject;
        T result = casestatemachine_definition(statemachine_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATE_EVENT_DEFINITION:
      {
        state_event_definition state_event_definition = (state_event_definition)theEObject;
        T result = casestate_event_definition(state_event_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.USE_ATTRIBUTES_DEFINITION:
      {
        use_attributes_definition use_attributes_definition = (use_attributes_definition)theEObject;
        T result = caseuse_attributes_definition(use_attributes_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXCLUDE_ATTRIBUTES_DEFINITION:
      {
        exclude_attributes_definition exclude_attributes_definition = (exclude_attributes_definition)theEObject;
        T result = caseexclude_attributes_definition(exclude_attributes_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TAG_DEFINITION:
      {
        tag_definition tag_definition = (tag_definition)theEObject;
        T result = casetag_definition(tag_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TAG_UNION_DEFINITION:
      {
        tag_union_definition tag_union_definition = (tag_union_definition)theEObject;
        T result = casetag_union_definition(tag_union_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TAG_MINUS_DEFINITION:
      {
        tag_minus_definition tag_minus_definition = (tag_minus_definition)theEObject;
        T result = casetag_minus_definition(tag_minus_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TAG_INTERSECT_DEFINITION:
      {
        tag_intersect_definition tag_intersect_definition = (tag_intersect_definition)theEObject;
        T result = casetag_intersect_definition(tag_intersect_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SYNC_POLICY_DEFINITION:
      {
        sync_policy_definition sync_policy_definition = (sync_policy_definition)theEObject;
        T result = casesync_policy_definition(sync_policy_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BATCH_SYNC_POLICY_DEFINITION:
      {
        batch_sync_policy_definition batch_sync_policy_definition = (batch_sync_policy_definition)theEObject;
        T result = casebatch_sync_policy_definition(batch_sync_policy_definition);
        if (result == null) result = casesync_policy_definition(batch_sync_policy_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SYNC_SCHEDULE_DEFINITION:
      {
        sync_schedule_definition sync_schedule_definition = (sync_schedule_definition)theEObject;
        T result = casesync_schedule_definition(sync_schedule_definition);
        if (result == null) result = casebatch_sync_policy_definition(sync_schedule_definition);
        if (result == null) result = casepush_sync_policy_definition(sync_schedule_definition);
        if (result == null) result = casegrouped_push_sync_policy_definition(sync_schedule_definition);
        if (result == null) result = casesync_policy_definition(sync_schedule_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BATCH_SYNC_HOURLY_POLICY:
      {
        batch_sync_hourly_policy batch_sync_hourly_policy = (batch_sync_hourly_policy)theEObject;
        T result = casebatch_sync_hourly_policy(batch_sync_hourly_policy);
        if (result == null) result = casesync_schedule_definition(batch_sync_hourly_policy);
        if (result == null) result = casebatch_sync_policy_definition(batch_sync_hourly_policy);
        if (result == null) result = casepush_sync_policy_definition(batch_sync_hourly_policy);
        if (result == null) result = casegrouped_push_sync_policy_definition(batch_sync_hourly_policy);
        if (result == null) result = casesync_policy_definition(batch_sync_hourly_policy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BATCH_SYNC_DAILY_POLICY:
      {
        batch_sync_daily_policy batch_sync_daily_policy = (batch_sync_daily_policy)theEObject;
        T result = casebatch_sync_daily_policy(batch_sync_daily_policy);
        if (result == null) result = casesync_schedule_definition(batch_sync_daily_policy);
        if (result == null) result = casebatch_sync_policy_definition(batch_sync_daily_policy);
        if (result == null) result = casepush_sync_policy_definition(batch_sync_daily_policy);
        if (result == null) result = casegrouped_push_sync_policy_definition(batch_sync_daily_policy);
        if (result == null) result = casesync_policy_definition(batch_sync_daily_policy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BATCH_SYNC_WEEKLY_POLICY:
      {
        batch_sync_weekly_policy batch_sync_weekly_policy = (batch_sync_weekly_policy)theEObject;
        T result = casebatch_sync_weekly_policy(batch_sync_weekly_policy);
        if (result == null) result = casesync_schedule_definition(batch_sync_weekly_policy);
        if (result == null) result = casebatch_sync_policy_definition(batch_sync_weekly_policy);
        if (result == null) result = casepush_sync_policy_definition(batch_sync_weekly_policy);
        if (result == null) result = casegrouped_push_sync_policy_definition(batch_sync_weekly_policy);
        if (result == null) result = casesync_policy_definition(batch_sync_weekly_policy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BATCH_SYNC_WEEKDAY:
      {
        batch_sync_weekday batch_sync_weekday = (batch_sync_weekday)theEObject;
        T result = casebatch_sync_weekday(batch_sync_weekday);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BATCH_SYNC_MONTHLY_POLICY:
      {
        batch_sync_monthly_policy batch_sync_monthly_policy = (batch_sync_monthly_policy)theEObject;
        T result = casebatch_sync_monthly_policy(batch_sync_monthly_policy);
        if (result == null) result = casesync_schedule_definition(batch_sync_monthly_policy);
        if (result == null) result = casebatch_sync_policy_definition(batch_sync_monthly_policy);
        if (result == null) result = casepush_sync_policy_definition(batch_sync_monthly_policy);
        if (result == null) result = casegrouped_push_sync_policy_definition(batch_sync_monthly_policy);
        if (result == null) result = casesync_policy_definition(batch_sync_monthly_policy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SYNC_GROUP_DEFINITION:
      {
        sync_group_definition sync_group_definition = (sync_group_definition)theEObject;
        T result = casesync_group_definition(sync_group_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FILTER_ON_ENTITY_SETTING:
      {
        filter_on_entity_setting filter_on_entity_setting = (filter_on_entity_setting)theEObject;
        T result = casefilter_on_entity_setting(filter_on_entity_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INCOMING_SYNC_POLICY_DEFINITION:
      {
        incoming_sync_policy_definition incoming_sync_policy_definition = (incoming_sync_policy_definition)theEObject;
        T result = caseincoming_sync_policy_definition(incoming_sync_policy_definition);
        if (result == null) result = casesync_policy_definition(incoming_sync_policy_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CLIENT_CACHE_SYNC_POLICY_DEFINITION:
      {
        client_cache_sync_policy_definition client_cache_sync_policy_definition = (client_cache_sync_policy_definition)theEObject;
        T result = caseclient_cache_sync_policy_definition(client_cache_sync_policy_definition);
        if (result == null) result = casesync_policy_definition(client_cache_sync_policy_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CACHE_INVALIDATION_DEFINITION:
      {
        cache_invalidation_definition cache_invalidation_definition = (cache_invalidation_definition)theEObject;
        T result = casecache_invalidation_definition(cache_invalidation_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CACHE_INVALIDATION_AFTER:
      {
        cache_invalidation_after cache_invalidation_after = (cache_invalidation_after)theEObject;
        T result = casecache_invalidation_after(cache_invalidation_after);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ONLINE_ONLY_SYNC_POLICY_DEFINITION:
      {
        online_only_sync_policy_definition online_only_sync_policy_definition = (online_only_sync_policy_definition)theEObject;
        T result = caseonline_only_sync_policy_definition(online_only_sync_policy_definition);
        if (result == null) result = casesync_policy_definition(online_only_sync_policy_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PUSH_SYNC_POLICY_DEFINITION:
      {
        push_sync_policy_definition push_sync_policy_definition = (push_sync_policy_definition)theEObject;
        T result = casepush_sync_policy_definition(push_sync_policy_definition);
        if (result == null) result = casesync_policy_definition(push_sync_policy_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.GUARD_CONDITION_DEFINITION:
      {
        guard_condition_definition guard_condition_definition = (guard_condition_definition)theEObject;
        T result = caseguard_condition_definition(guard_condition_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OWNERSHIP_QUERY_DEFINITION:
      {
        ownership_query_definition ownership_query_definition = (ownership_query_definition)theEObject;
        T result = caseownership_query_definition(ownership_query_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXCLUDE_DETAILS_SETTING:
      {
        exclude_details_setting exclude_details_setting = (exclude_details_setting)theEObject;
        T result = caseexclude_details_setting(exclude_details_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.GROUPED_PUSH_SYNC_POLICY_DEFINITION:
      {
        grouped_push_sync_policy_definition grouped_push_sync_policy_definition = (grouped_push_sync_policy_definition)theEObject;
        T result = casegrouped_push_sync_policy_definition(grouped_push_sync_policy_definition);
        if (result == null) result = casesync_policy_definition(grouped_push_sync_policy_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.USER_FILTER_REFERENCE:
      {
        user_filter_reference user_filter_reference = (user_filter_reference)theEObject;
        T result = caseuser_filter_reference(user_filter_reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LANGUAGE_DEPENDENT_DEFINITION:
      {
        language_dependent_definition language_dependent_definition = (language_dependent_definition)theEObject;
        T result = caselanguage_dependent_definition(language_dependent_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LANGUAGE_DEPENDENT_DEFINITION_LANGUAGE_DEPENDENT_TYPE:
      {
        language_dependent_definition_language_dependent_type language_dependent_definition_language_dependent_type = (language_dependent_definition_language_dependent_type)theEObject;
        T result = caselanguage_dependent_definition_language_dependent_type(language_dependent_definition_language_dependent_type);
        if (result == null) result = caselanguage_dependent_definition(language_dependent_definition_language_dependent_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CHANGE_DETECTION_DEFINITION:
      {
        change_detection_definition change_detection_definition = (change_detection_definition)theEObject;
        T result = casechange_detection_definition(change_detection_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TRIGGER:
      {
        trigger trigger = (trigger)theEObject;
        T result = casetrigger(trigger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TRIGGER_ATTRIBUTES:
      {
        trigger_attributes trigger_attributes = (trigger_attributes)theEObject;
        T result = casetrigger_attributes(trigger_attributes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TRIGGER_ATTRIBUTE:
      {
        trigger_attribute trigger_attribute = (trigger_attribute)theEObject;
        T result = casetrigger_attribute(trigger_attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMBINE_ATTRIBUTE:
      {
        combine_attribute combine_attribute = (combine_attribute)theEObject;
        T result = casecombine_attribute(combine_attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TRIGGER_ATTRIBUTE_TABLE_COLUMNS:
      {
        trigger_attribute_table_columns trigger_attribute_table_columns = (trigger_attribute_table_columns)theEObject;
        T result = casetrigger_attribute_table_columns(trigger_attribute_table_columns);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MAPPING_ARGUMENTS:
      {
        mapping_arguments mapping_arguments = (mapping_arguments)theEObject;
        T result = casemapping_arguments(mapping_arguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OBJKEY_COLUMN:
      {
        objkey_column objkey_column = (objkey_column)theEObject;
        T result = caseobjkey_column(objkey_column);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TARGET_TABLE:
      {
        target_table target_table = (target_table)theEObject;
        T result = casetarget_table(target_table);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OBJKEY_MAPPING:
      {
        objkey_mapping objkey_mapping = (objkey_mapping)theEObject;
        T result = caseobjkey_mapping(objkey_mapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.GUARD_FUNCTION:
      {
        guard_function guard_function = (guard_function)theEObject;
        T result = caseguard_function(guard_function);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXCLUDE_FROM_CONFIG_FLAG_SETTING:
      {
        exclude_from_config_flag_setting exclude_from_config_flag_setting = (exclude_from_config_flag_setting)theEObject;
        T result = caseexclude_from_config_flag_setting(exclude_from_config_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SUMMARY_DEFINITION:
      {
        summary_definition summary_definition = (summary_definition)theEObject;
        T result = casesummary_definition(summary_definition);
        if (result == null) result = caseMainElement(summary_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.QUERY_DEFINITION:
      {
        query_definition query_definition = (query_definition)theEObject;
        T result = casequery_definition(query_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LU_DEFINITION:
      {
        lu_definition lu_definition = (lu_definition)theEObject;
        T result = caselu_definition(lu_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUMERATION_DEFINITION:
      {
        enumeration_definition enumeration_definition = (enumeration_definition)theEObject;
        T result = caseenumeration_definition(enumeration_definition);
        if (result == null) result = caseMainElement(enumeration_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUMERATION_TYPE_DEFINITION:
      {
        enumeration_type_definition enumeration_type_definition = (enumeration_type_definition)theEObject;
        T result = caseenumeration_type_definition(enumeration_type_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUMERATION_TYPE_DEFINITION_ENUMERATION_TYPE:
      {
        enumeration_type_definition_enumeration_type enumeration_type_definition_enumeration_type = (enumeration_type_definition_enumeration_type)theEObject;
        T result = caseenumeration_type_definition_enumeration_type(enumeration_type_definition_enumeration_type);
        if (result == null) result = caseenumeration_type_definition(enumeration_type_definition_enumeration_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUMERATION_VALUE_DEFINITION:
      {
        enumeration_value_definition enumeration_value_definition = (enumeration_value_definition)theEObject;
        T result = caseenumeration_value_definition(enumeration_value_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXEC_DEFINITION:
      {
        exec_definition exec_definition = (exec_definition)theEObject;
        T result = caseexec_definition(exec_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LABEL_DEFINITION:
      {
        label_definition label_definition = (label_definition)theEObject;
        T result = caselabel_definition(label_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.USER_FILTER_DEFINITION:
      {
        user_filter_definition user_filter_definition = (user_filter_definition)theEObject;
        T result = caseuser_filter_definition(user_filter_definition);
        if (result == null) result = caseMainElement(user_filter_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VIEW_FILTER_DEFINITION:
      {
        view_filter_definition view_filter_definition = (view_filter_definition)theEObject;
        T result = caseview_filter_definition(view_filter_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.USER_COLUMN_DEFINITION:
      {
        user_column_definition user_column_definition = (user_column_definition)theEObject;
        T result = caseuser_column_definition(user_column_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FILTER_COLUMNS_DEFINITION:
      {
        filter_columns_definition filter_columns_definition = (filter_columns_definition)theEObject;
        T result = casefilter_columns_definition(filter_columns_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FILTER_COLUMN_DEFINITION:
      {
        filter_column_definition filter_column_definition = (filter_column_definition)theEObject;
        T result = casefilter_column_definition(filter_column_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FILTER_COLUMN_OPERATOR:
      {
        filter_column_operator filter_column_operator = (filter_column_operator)theEObject;
        T result = casefilter_column_operator(filter_column_operator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FILTER_COLUMN_OPERATOR_FILTER_COLUMN_OPERATOR_NAME:
      {
        filter_column_operator_filter_column_operator_name filter_column_operator_filter_column_operator_name = (filter_column_operator_filter_column_operator_name)theEObject;
        T result = casefilter_column_operator_filter_column_operator_name(filter_column_operator_filter_column_operator_name);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.NULL_IMAGE:
      {
        null_image null_image = (null_image)theEObject;
        T result = casenull_image(null_image);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.NULL_IMAGE_NULL_MATCH:
      {
        null_image_null_match null_image_null_match = (null_image_null_match)theEObject;
        T result = casenull_image_null_match(null_image_null_match);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TRIGGER_ON_DEFINITION:
      {
        trigger_on_definition trigger_on_definition = (trigger_on_definition)theEObject;
        T result = casetrigger_on_definition(trigger_on_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ACTION_DEFINITION:
      {
        action_definition action_definition = (action_definition)theEObject;
        T result = caseaction_definition(action_definition);
        if (result == null) result = caseMainElement(action_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_DEFINITION:
      {
        type_definition type_definition = (type_definition)theEObject;
        T result = casetype_definition(type_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.IMPLEMENTATION_DEFINITION:
      {
        implementation_definition implementation_definition = (implementation_definition)theEObject;
        T result = caseimplementation_definition(implementation_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DEPENDENCY_DEFINITION:
      {
        dependency_definition dependency_definition = (dependency_definition)theEObject;
        T result = casedependency_definition(dependency_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SERVER_PACKAGE_REFERENCE:
      {
        server_package_reference server_package_reference = (server_package_reference)theEObject;
        T result = caseserver_package_reference(server_package_reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DEPENDENCIES_DEFINITION:
      {
        dependencies_definition dependencies_definition = (dependencies_definition)theEObject;
        T result = casedependencies_definition(dependencies_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MANDATORY_FLAG_SETTING:
      {
        mandatory_flag_setting mandatory_flag_setting = (mandatory_flag_setting)theEObject;
        T result = casemandatory_flag_setting(mandatory_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PROJECTION_FLAG_CONDITION:
      {
        projection_flag_condition projection_flag_condition = (projection_flag_condition)theEObject;
        T result = caseprojection_flag_condition(projection_flag_condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PROJECTION_FLAG_CONDITION_ATOM:
      {
        projection_flag_condition_atom projection_flag_condition_atom = (projection_flag_condition_atom)theEObject;
        T result = caseprojection_flag_condition_atom(projection_flag_condition_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PROJECTION_FLAG_CONDITION_ATOM_VALUE:
      {
        projection_flag_condition_atom_value projection_flag_condition_atom_value = (projection_flag_condition_atom_value)theEObject;
        T result = caseprojection_flag_condition_atom_value(projection_flag_condition_atom_value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_DEFINITION:
      {
        parameter_definition parameter_definition = (parameter_definition)theEObject;
        T result = caseparameter_definition(parameter_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AVAILABLE_FLAG_SETTING:
      {
        available_flag_setting available_flag_setting = (available_flag_setting)theEObject;
        T result = caseavailable_flag_setting(available_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TRANSACTION_GROUP_DEFINITION:
      {
        transaction_group_definition transaction_group_definition = (transaction_group_definition)theEObject;
        T result = casetransaction_group_definition(transaction_group_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OFFLINE_SYNC_POLICY_DEFINITION:
      {
        offline_sync_policy_definition offline_sync_policy_definition = (offline_sync_policy_definition)theEObject;
        T result = caseoffline_sync_policy_definition(offline_sync_policy_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SUPPORT_WARNINGS_FLAG_SETTING:
      {
        support_warnings_flag_setting support_warnings_flag_setting = (support_warnings_flag_setting)theEObject;
        T result = casesupport_warnings_flag_setting(support_warnings_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FUNCTION_DEFINITION:
      {
        function_definition function_definition = (function_definition)theEObject;
        T result = casefunction_definition(function_definition);
        if (result == null) result = caseMainElement(function_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BASED_ON_ENTITY_SET_DEFINITION:
      {
        based_on_entity_set_definition based_on_entity_set_definition = (based_on_entity_set_definition)theEObject;
        T result = casebased_on_entity_set_definition(based_on_entity_set_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SUPPORT_FILE_INFO_FLAG:
      {
        support_file_info_flag support_file_info_flag = (support_file_info_flag)theEObject;
        T result = casesupport_file_info_flag(support_file_info_flag);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FROM_DEFINITION:
      {
        from_definition from_definition = (from_definition)theEObject;
        T result = casefrom_definition(from_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ALTER_ATTRIBUTE_DEFINITION:
      {
        alter_attribute_definition alter_attribute_definition = (alter_attribute_definition)theEObject;
        T result = casealter_attribute_definition(alter_attribute_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FETCH_DEFINITION:
      {
        fetch_definition fetch_definition = (fetch_definition)theEObject;
        T result = casefetch_definition(fetch_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPLEXTYPE_DEFINITION:
      {
        complextype_definition complextype_definition = (complextype_definition)theEObject;
        T result = casecomplextype_definition(complextype_definition);
        if (result == null) result = caseMainElement(complextype_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VIRTUAL_DEFINITION:
      {
        virtual_definition virtual_definition = (virtual_definition)theEObject;
        T result = casevirtual_definition(virtual_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.WARNINGS_ENABLED_FLAG:
      {
        warnings_enabled_flag warnings_enabled_flag = (warnings_enabled_flag)theEObject;
        T result = casewarnings_enabled_flag(warnings_enabled_flag);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.KEYS_DEFINITION:
      {
        keys_definition keys_definition = (keys_definition)theEObject;
        T result = casekeys_definition(keys_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CRUD_DEFINITION:
      {
        crud_definition crud_definition = (crud_definition)theEObject;
        T result = casecrud_definition(crud_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CRUD_REFERENCE:
      {
        crud_reference crud_reference = (crud_reference)theEObject;
        T result = casecrud_reference(crud_reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DATAITEM_DEFINITION:
      {
        dataitem_definition dataitem_definition = (dataitem_definition)theEObject;
        T result = casedataitem_definition(dataitem_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUM_LOOKUP_LIST_FLAG_SETTING:
      {
        enum_lookup_list_flag_setting enum_lookup_list_flag_setting = (enum_lookup_list_flag_setting)theEObject;
        T result = caseenum_lookup_list_flag_setting(enum_lookup_list_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DEFAULT_DATA_DEFINITION:
      {
        default_data_definition default_data_definition = (default_data_definition)theEObject;
        T result = casedefault_data_definition(default_data_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.REGEXP_DEFINITION:
      {
        regexp_definition regexp_definition = (regexp_definition)theEObject;
        T result = caseregexp_definition(regexp_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MAXLENGTH_DEFINITION:
      {
        maxlength_definition maxlength_definition = (maxlength_definition)theEObject;
        T result = casemaxlength_definition(maxlength_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FORMAT_DEFINITION:
      {
        format_definition format_definition = (format_definition)theEObject;
        T result = caseformat_definition(format_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INLINE_PROPERTY_SETTING:
      {
        inline_property_setting inline_property_setting = (inline_property_setting)theEObject;
        T result = caseinline_property_setting(inline_property_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOV_FLAG_SETTING:
      {
        lov_flag_setting lov_flag_setting = (lov_flag_setting)theEObject;
        T result = caselov_flag_setting(lov_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.UPDATABLE_FLAG_SETTING:
      {
        updatable_flag_setting updatable_flag_setting = (updatable_flag_setting)theEObject;
        T result = caseupdatable_flag_setting(updatable_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SERVER_UPDATABLE_FLAG_SETTING:
      {
        server_updatable_flag_setting server_updatable_flag_setting = (server_updatable_flag_setting)theEObject;
        T result = caseserver_updatable_flag_setting(server_updatable_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SERVER_INSERTABLE_FLAG_SETTING:
      {
        server_insertable_flag_setting server_insertable_flag_setting = (server_insertable_flag_setting)theEObject;
        T result = caseserver_insertable_flag_setting(server_insertable_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VALIDATION_DEFINITION:
      {
        validation_definition validation_definition = (validation_definition)theEObject;
        T result = casevalidation_definition(validation_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.IMPLEMENTATION_TYPE_DEFINITION:
      {
        implementation_type_definition implementation_type_definition = (implementation_type_definition)theEObject;
        T result = caseimplementation_type_definition(implementation_type_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STREAM_FILE_INFO_DEFINITION:
      {
        stream_file_info_definition stream_file_info_definition = (stream_file_info_definition)theEObject;
        T result = casestream_file_info_definition(stream_file_info_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STREAM_FILE_NAME_ATTRIBUTE:
      {
        stream_file_name_attribute stream_file_name_attribute = (stream_file_name_attribute)theEObject;
        T result = casestream_file_name_attribute(stream_file_name_attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STREAM_MIME_TYPE_ATTRIBUTE:
      {
        stream_mime_type_attribute stream_mime_type_attribute = (stream_mime_type_attribute)theEObject;
        T result = casestream_mime_type_attribute(stream_mime_type_attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STREAM_ATTACHMENT_ATTRIBUTE:
      {
        stream_attachment_attribute stream_attachment_attribute = (stream_attachment_attribute)theEObject;
        T result = casestream_attachment_attribute(stream_attachment_attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DATAITEM_REFERENCE:
      {
        dataitem_reference dataitem_reference = (dataitem_reference)theEObject;
        T result = casedataitem_reference(dataitem_reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AGGREGATE_DEFINITION:
      {
        aggregate_definition aggregate_definition = (aggregate_definition)theEObject;
        T result = caseaggregate_definition(aggregate_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.KEY_REFERENCE:
      {
        key_reference key_reference = (key_reference)theEObject;
        T result = casekey_reference(key_reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TO_REFERENCE_DEFINITION:
      {
        to_reference_definition to_reference_definition = (to_reference_definition)theEObject;
        T result = caseto_reference_definition(to_reference_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TO_FUNCTION_DEFINITION:
      {
        to_function_definition to_function_definition = (to_function_definition)theEObject;
        T result = caseto_function_definition(to_function_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREFETCH_DEFINITION:
      {
        prefetch_definition prefetch_definition = (prefetch_definition)theEObject;
        T result = caseprefetch_definition(prefetch_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COPY_DEFINITION:
      {
        copy_definition copy_definition = (copy_definition)theEObject;
        T result = casecopy_definition(copy_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.WHERE_FILTER_DEFINITION:
      {
        where_filter_definition where_filter_definition = (where_filter_definition)theEObject;
        T result = casewhere_filter_definition(where_filter_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AGGREGATE_LIST_FLAG_SETTING:
      {
        aggregate_list_flag_setting aggregate_list_flag_setting = (aggregate_list_flag_setting)theEObject;
        T result = caseaggregate_list_flag_setting(aggregate_list_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AGGREGATE_CHECK_FLAG_SETTING:
      {
        aggregate_check_flag_setting aggregate_check_flag_setting = (aggregate_check_flag_setting)theEObject;
        T result = caseaggregate_check_flag_setting(aggregate_check_flag_setting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AGGREGATE_WILDCARD_DEFINITION:
      {
        aggregate_wildcard_definition aggregate_wildcard_definition = (aggregate_wildcard_definition)theEObject;
        T result = caseaggregate_wildcard_definition(aggregate_wildcard_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ARRAY_DEFINITION:
      {
        array_definition array_definition = (array_definition)theEObject;
        T result = casearray_definition(array_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FILTERING_CONTEXT_DEFINITION:
      {
        filtering_context_definition filtering_context_definition = (filtering_context_definition)theEObject;
        T result = casefiltering_context_definition(filtering_context_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FILTERING_CONTEXT_PROPERTY:
      {
        filtering_context_property filtering_context_property = (filtering_context_property)theEObject;
        T result = casefiltering_context_property(filtering_context_property);
        if (result == null) result = casefiltering_context_definition(filtering_context_property);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ABSTRACT_DEF:
      {
        abstract_def abstract_def = (abstract_def)theEObject;
        T result = caseabstract_def(abstract_def);
        if (result == null) result = caseMainElement(abstract_def);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DYNAMIC_COMPONENT_DEPENDENCY:
      {
        dynamic_component_dependency dynamic_component_dependency = (dynamic_component_dependency)theEObject;
        T result = casedynamic_component_dependency(dynamic_component_dependency);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.IDENTIFIER:
      {
        identifier identifier = (identifier)theEObject;
        T result = caseidentifier(identifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domainmodel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domainmodel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomainmodel(Domainmodel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Main Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Main Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMainElement(MainElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>projection name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>projection name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprojection_name(projection_name object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>projection component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>projection component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprojection_component(projection_component object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>layer specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>layer specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselayer_specification(layer_specification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedescription(description object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>capability</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>capability</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecapability(capability object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>category</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>category</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecategory(category object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>service group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>service group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseservice_group(service_group object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>include fragment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>include fragment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinclude_fragment(include_fragment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>override</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>override</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseoverride(override object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>overtake</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>overtake</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseovertake(overtake object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>entity set definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>entity set definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseentity_set_definition(entity_set_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>where definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>where definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casewhere_definition(where_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>filtering context list definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>filtering context list definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefiltering_context_list_definition(filtering_context_list_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>offline filter definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>offline filter definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseoffline_filter_definition(offline_filter_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>singleton set definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>singleton set definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesingleton_set_definition(singleton_set_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>computeditem definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>computeditem definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecomputeditem_definition(computeditem_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>compute definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>compute definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecompute_definition(compute_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>compute expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>compute expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecompute_expression(compute_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>compute expression atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>compute expression atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecompute_expression_atom(compute_expression_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>compute expression atom value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>compute expression atom value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecompute_expression_atom_value(compute_expression_atom_value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>datasource definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>datasource definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedatasource_definition(datasource_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>key fetch on create flag</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>key fetch on create flag</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casekey_fetch_on_create_flag(key_fetch_on_create_flag object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>luname definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>luname definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseluname_definition(luname_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>keyref definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>keyref definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casekeyref_definition(keyref_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>validate action reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>validate action reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevalidate_action_reference(validate_action_reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>statemachine definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>statemachine definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatemachine_definition(statemachine_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>state event definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>state event definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestate_event_definition(state_event_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>use attributes definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>use attributes definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseuse_attributes_definition(use_attributes_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>exclude attributes definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>exclude attributes definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexclude_attributes_definition(exclude_attributes_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tag definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tag definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetag_definition(tag_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tag union definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tag union definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetag_union_definition(tag_union_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tag minus definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tag minus definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetag_minus_definition(tag_minus_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tag intersect definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tag intersect definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetag_intersect_definition(tag_intersect_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>sync policy definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>sync policy definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesync_policy_definition(sync_policy_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>batch sync policy definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>batch sync policy definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebatch_sync_policy_definition(batch_sync_policy_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>sync schedule definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>sync schedule definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesync_schedule_definition(sync_schedule_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>batch sync hourly policy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>batch sync hourly policy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebatch_sync_hourly_policy(batch_sync_hourly_policy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>batch sync daily policy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>batch sync daily policy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebatch_sync_daily_policy(batch_sync_daily_policy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>batch sync weekly policy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>batch sync weekly policy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebatch_sync_weekly_policy(batch_sync_weekly_policy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>batch sync weekday</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>batch sync weekday</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebatch_sync_weekday(batch_sync_weekday object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>batch sync monthly policy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>batch sync monthly policy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebatch_sync_monthly_policy(batch_sync_monthly_policy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>sync group definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>sync group definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesync_group_definition(sync_group_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>filter on entity setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>filter on entity setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefilter_on_entity_setting(filter_on_entity_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>incoming sync policy definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>incoming sync policy definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseincoming_sync_policy_definition(incoming_sync_policy_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>client cache sync policy definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>client cache sync policy definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseclient_cache_sync_policy_definition(client_cache_sync_policy_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cache invalidation definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cache invalidation definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecache_invalidation_definition(cache_invalidation_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cache invalidation after</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cache invalidation after</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecache_invalidation_after(cache_invalidation_after object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>online only sync policy definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>online only sync policy definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseonline_only_sync_policy_definition(online_only_sync_policy_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>push sync policy definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>push sync policy definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepush_sync_policy_definition(push_sync_policy_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>guard condition definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>guard condition definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseguard_condition_definition(guard_condition_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ownership query definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ownership query definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseownership_query_definition(ownership_query_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>exclude details setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>exclude details setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexclude_details_setting(exclude_details_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>grouped push sync policy definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>grouped push sync policy definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casegrouped_push_sync_policy_definition(grouped_push_sync_policy_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>user filter reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>user filter reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseuser_filter_reference(user_filter_reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>language dependent definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>language dependent definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselanguage_dependent_definition(language_dependent_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>language dependent definition language dependent type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>language dependent definition language dependent type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselanguage_dependent_definition_language_dependent_type(language_dependent_definition_language_dependent_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>change detection definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>change detection definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casechange_detection_definition(change_detection_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>trigger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>trigger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetrigger(trigger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>trigger attributes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>trigger attributes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetrigger_attributes(trigger_attributes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>trigger attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>trigger attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetrigger_attribute(trigger_attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>combine attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>combine attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecombine_attribute(combine_attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>trigger attribute table columns</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>trigger attribute table columns</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetrigger_attribute_table_columns(trigger_attribute_table_columns object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>mapping arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>mapping arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemapping_arguments(mapping_arguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>objkey column</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>objkey column</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseobjkey_column(objkey_column object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>target table</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>target table</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetarget_table(target_table object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>objkey mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>objkey mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseobjkey_mapping(objkey_mapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>guard function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>guard function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseguard_function(guard_function object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>exclude from config flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>exclude from config flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexclude_from_config_flag_setting(exclude_from_config_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>summary definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>summary definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesummary_definition(summary_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>query definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>query definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casequery_definition(query_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>lu definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>lu definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselu_definition(lu_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enumeration definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enumeration definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenumeration_definition(enumeration_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enumeration type definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enumeration type definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenumeration_type_definition(enumeration_type_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enumeration type definition enumeration type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enumeration type definition enumeration type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenumeration_type_definition_enumeration_type(enumeration_type_definition_enumeration_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enumeration value definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enumeration value definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenumeration_value_definition(enumeration_value_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>exec definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>exec definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexec_definition(exec_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>label definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>label definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselabel_definition(label_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>user filter definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>user filter definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseuser_filter_definition(user_filter_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>view filter definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>view filter definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseview_filter_definition(view_filter_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>user column definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>user column definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseuser_column_definition(user_column_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>filter columns definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>filter columns definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefilter_columns_definition(filter_columns_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>filter column definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>filter column definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefilter_column_definition(filter_column_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>filter column operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>filter column operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefilter_column_operator(filter_column_operator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>filter column operator filter column operator name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>filter column operator filter column operator name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefilter_column_operator_filter_column_operator_name(filter_column_operator_filter_column_operator_name object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>null image</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>null image</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casenull_image(null_image object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>null image null match</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>null image null match</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casenull_image_null_match(null_image_null_match object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>trigger on definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>trigger on definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetrigger_on_definition(trigger_on_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>action definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>action definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseaction_definition(action_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_definition(type_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>implementation definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>implementation definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseimplementation_definition(implementation_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>dependency definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>dependency definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedependency_definition(dependency_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>server package reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>server package reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseserver_package_reference(server_package_reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>dependencies definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>dependencies definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedependencies_definition(dependencies_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>mandatory flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>mandatory flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemandatory_flag_setting(mandatory_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>projection flag condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>projection flag condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprojection_flag_condition(projection_flag_condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>projection flag condition atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>projection flag condition atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprojection_flag_condition_atom(projection_flag_condition_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>projection flag condition atom value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>projection flag condition atom value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprojection_flag_condition_atom_value(projection_flag_condition_atom_value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameter_definition(parameter_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>available flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>available flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseavailable_flag_setting(available_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>transaction group definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>transaction group definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetransaction_group_definition(transaction_group_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>offline sync policy definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>offline sync policy definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseoffline_sync_policy_definition(offline_sync_policy_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>support warnings flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>support warnings flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesupport_warnings_flag_setting(support_warnings_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>function definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>function definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefunction_definition(function_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>based on entity set definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>based on entity set definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebased_on_entity_set_definition(based_on_entity_set_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>support file info flag</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>support file info flag</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesupport_file_info_flag(support_file_info_flag object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>from definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>from definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefrom_definition(from_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>alter attribute definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>alter attribute definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casealter_attribute_definition(alter_attribute_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fetch definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fetch definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefetch_definition(fetch_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>complextype definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>complextype definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecomplextype_definition(complextype_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>virtual definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>virtual definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevirtual_definition(virtual_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>warnings enabled flag</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>warnings enabled flag</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casewarnings_enabled_flag(warnings_enabled_flag object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>keys definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>keys definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casekeys_definition(keys_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>crud definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>crud definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecrud_definition(crud_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>crud reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>crud reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecrud_reference(crud_reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>dataitem definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>dataitem definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedataitem_definition(dataitem_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enum lookup list flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enum lookup list flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenum_lookup_list_flag_setting(enum_lookup_list_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>default data definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>default data definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedefault_data_definition(default_data_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>regexp definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>regexp definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseregexp_definition(regexp_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>maxlength definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>maxlength definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemaxlength_definition(maxlength_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>format definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>format definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformat_definition(format_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>inline property setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>inline property setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinline_property_setting(inline_property_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>lov flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>lov flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselov_flag_setting(lov_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>updatable flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>updatable flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseupdatable_flag_setting(updatable_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>server updatable flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>server updatable flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseserver_updatable_flag_setting(server_updatable_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>server insertable flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>server insertable flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseserver_insertable_flag_setting(server_insertable_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>validation definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>validation definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevalidation_definition(validation_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>implementation type definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>implementation type definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseimplementation_type_definition(implementation_type_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>stream file info definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>stream file info definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestream_file_info_definition(stream_file_info_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>stream file name attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>stream file name attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestream_file_name_attribute(stream_file_name_attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>stream mime type attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>stream mime type attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestream_mime_type_attribute(stream_mime_type_attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>stream attachment attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>stream attachment attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestream_attachment_attribute(stream_attachment_attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>dataitem reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>dataitem reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedataitem_reference(dataitem_reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>aggregate definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>aggregate definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseaggregate_definition(aggregate_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>key reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>key reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casekey_reference(key_reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>to reference definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>to reference definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseto_reference_definition(to_reference_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>to function definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>to function definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseto_function_definition(to_function_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>prefetch definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>prefetch definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprefetch_definition(prefetch_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>copy definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>copy definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecopy_definition(copy_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>where filter definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>where filter definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casewhere_filter_definition(where_filter_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>aggregate list flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>aggregate list flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseaggregate_list_flag_setting(aggregate_list_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>aggregate check flag setting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>aggregate check flag setting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseaggregate_check_flag_setting(aggregate_check_flag_setting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>aggregate wildcard definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>aggregate wildcard definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseaggregate_wildcard_definition(aggregate_wildcard_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>array definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>array definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casearray_definition(array_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>filtering context definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>filtering context definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefiltering_context_definition(filtering_context_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>filtering context property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>filtering context property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefiltering_context_property(filtering_context_property object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>abstract def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>abstract def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseabstract_def(abstract_def object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>dynamic component dependency</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>dynamic component dependency</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedynamic_component_dependency(dynamic_component_dependency object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseidentifier(identifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyDslSwitch
