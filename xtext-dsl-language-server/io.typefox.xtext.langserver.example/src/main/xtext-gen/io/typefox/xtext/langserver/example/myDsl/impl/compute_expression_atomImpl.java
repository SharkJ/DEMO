/**
 * generated by Xtext 2.13.0
 */
package io.typefox.xtext.langserver.example.myDsl.impl;

import io.typefox.xtext.langserver.example.myDsl.MyDslPackage;
import io.typefox.xtext.langserver.example.myDsl.compute_expression_atom;
import io.typefox.xtext.langserver.example.myDsl.compute_expression_atom_value;
import io.typefox.xtext.langserver.example.myDsl.projection_flag_condition;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>compute expression atom</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.typefox.xtext.langserver.example.myDsl.impl.compute_expression_atomImpl#getCompute_expression_atom_datasource_ref <em>Compute expression atom datasource ref</em>}</li>
 *   <li>{@link io.typefox.xtext.langserver.example.myDsl.impl.compute_expression_atomImpl#getProjection_flag_condition <em>Projection flag condition</em>}</li>
 *   <li>{@link io.typefox.xtext.langserver.example.myDsl.impl.compute_expression_atomImpl#getCompute_expression_atom_dataitem_ref <em>Compute expression atom dataitem ref</em>}</li>
 *   <li>{@link io.typefox.xtext.langserver.example.myDsl.impl.compute_expression_atomImpl#getCompute_expression_atom_value <em>Compute expression atom value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class compute_expression_atomImpl extends MinimalEObjectImpl.Container implements compute_expression_atom
{
  /**
   * The default value of the '{@link #getCompute_expression_atom_datasource_ref() <em>Compute expression atom datasource ref</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompute_expression_atom_datasource_ref()
   * @generated
   * @ordered
   */
  protected static final String COMPUTE_EXPRESSION_ATOM_DATASOURCE_REF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompute_expression_atom_datasource_ref() <em>Compute expression atom datasource ref</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompute_expression_atom_datasource_ref()
   * @generated
   * @ordered
   */
  protected String compute_expression_atom_datasource_ref = COMPUTE_EXPRESSION_ATOM_DATASOURCE_REF_EDEFAULT;

  /**
   * The cached value of the '{@link #getProjection_flag_condition() <em>Projection flag condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjection_flag_condition()
   * @generated
   * @ordered
   */
  protected projection_flag_condition projection_flag_condition;

  /**
   * The default value of the '{@link #getCompute_expression_atom_dataitem_ref() <em>Compute expression atom dataitem ref</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompute_expression_atom_dataitem_ref()
   * @generated
   * @ordered
   */
  protected static final String COMPUTE_EXPRESSION_ATOM_DATAITEM_REF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompute_expression_atom_dataitem_ref() <em>Compute expression atom dataitem ref</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompute_expression_atom_dataitem_ref()
   * @generated
   * @ordered
   */
  protected String compute_expression_atom_dataitem_ref = COMPUTE_EXPRESSION_ATOM_DATAITEM_REF_EDEFAULT;

  /**
   * The cached value of the '{@link #getCompute_expression_atom_value() <em>Compute expression atom value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompute_expression_atom_value()
   * @generated
   * @ordered
   */
  protected compute_expression_atom_value compute_expression_atom_value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected compute_expression_atomImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.COMPUTE_EXPRESSION_ATOM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCompute_expression_atom_datasource_ref()
  {
    return compute_expression_atom_datasource_ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompute_expression_atom_datasource_ref(String newCompute_expression_atom_datasource_ref)
  {
    String oldCompute_expression_atom_datasource_ref = compute_expression_atom_datasource_ref;
    compute_expression_atom_datasource_ref = newCompute_expression_atom_datasource_ref;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_DATASOURCE_REF, oldCompute_expression_atom_datasource_ref, compute_expression_atom_datasource_ref));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public projection_flag_condition getProjection_flag_condition()
  {
    return projection_flag_condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProjection_flag_condition(projection_flag_condition newProjection_flag_condition, NotificationChain msgs)
  {
    projection_flag_condition oldProjection_flag_condition = projection_flag_condition;
    projection_flag_condition = newProjection_flag_condition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPUTE_EXPRESSION_ATOM__PROJECTION_FLAG_CONDITION, oldProjection_flag_condition, newProjection_flag_condition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProjection_flag_condition(projection_flag_condition newProjection_flag_condition)
  {
    if (newProjection_flag_condition != projection_flag_condition)
    {
      NotificationChain msgs = null;
      if (projection_flag_condition != null)
        msgs = ((InternalEObject)projection_flag_condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPUTE_EXPRESSION_ATOM__PROJECTION_FLAG_CONDITION, null, msgs);
      if (newProjection_flag_condition != null)
        msgs = ((InternalEObject)newProjection_flag_condition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPUTE_EXPRESSION_ATOM__PROJECTION_FLAG_CONDITION, null, msgs);
      msgs = basicSetProjection_flag_condition(newProjection_flag_condition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPUTE_EXPRESSION_ATOM__PROJECTION_FLAG_CONDITION, newProjection_flag_condition, newProjection_flag_condition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCompute_expression_atom_dataitem_ref()
  {
    return compute_expression_atom_dataitem_ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompute_expression_atom_dataitem_ref(String newCompute_expression_atom_dataitem_ref)
  {
    String oldCompute_expression_atom_dataitem_ref = compute_expression_atom_dataitem_ref;
    compute_expression_atom_dataitem_ref = newCompute_expression_atom_dataitem_ref;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_DATAITEM_REF, oldCompute_expression_atom_dataitem_ref, compute_expression_atom_dataitem_ref));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public compute_expression_atom_value getCompute_expression_atom_value()
  {
    return compute_expression_atom_value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompute_expression_atom_value(compute_expression_atom_value newCompute_expression_atom_value, NotificationChain msgs)
  {
    compute_expression_atom_value oldCompute_expression_atom_value = compute_expression_atom_value;
    compute_expression_atom_value = newCompute_expression_atom_value;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_VALUE, oldCompute_expression_atom_value, newCompute_expression_atom_value);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompute_expression_atom_value(compute_expression_atom_value newCompute_expression_atom_value)
  {
    if (newCompute_expression_atom_value != compute_expression_atom_value)
    {
      NotificationChain msgs = null;
      if (compute_expression_atom_value != null)
        msgs = ((InternalEObject)compute_expression_atom_value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_VALUE, null, msgs);
      if (newCompute_expression_atom_value != null)
        msgs = ((InternalEObject)newCompute_expression_atom_value).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_VALUE, null, msgs);
      msgs = basicSetCompute_expression_atom_value(newCompute_expression_atom_value, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_VALUE, newCompute_expression_atom_value, newCompute_expression_atom_value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__PROJECTION_FLAG_CONDITION:
        return basicSetProjection_flag_condition(null, msgs);
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_VALUE:
        return basicSetCompute_expression_atom_value(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_DATASOURCE_REF:
        return getCompute_expression_atom_datasource_ref();
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__PROJECTION_FLAG_CONDITION:
        return getProjection_flag_condition();
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_DATAITEM_REF:
        return getCompute_expression_atom_dataitem_ref();
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_VALUE:
        return getCompute_expression_atom_value();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_DATASOURCE_REF:
        setCompute_expression_atom_datasource_ref((String)newValue);
        return;
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__PROJECTION_FLAG_CONDITION:
        setProjection_flag_condition((projection_flag_condition)newValue);
        return;
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_DATAITEM_REF:
        setCompute_expression_atom_dataitem_ref((String)newValue);
        return;
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_VALUE:
        setCompute_expression_atom_value((compute_expression_atom_value)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_DATASOURCE_REF:
        setCompute_expression_atom_datasource_ref(COMPUTE_EXPRESSION_ATOM_DATASOURCE_REF_EDEFAULT);
        return;
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__PROJECTION_FLAG_CONDITION:
        setProjection_flag_condition((projection_flag_condition)null);
        return;
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_DATAITEM_REF:
        setCompute_expression_atom_dataitem_ref(COMPUTE_EXPRESSION_ATOM_DATAITEM_REF_EDEFAULT);
        return;
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_VALUE:
        setCompute_expression_atom_value((compute_expression_atom_value)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_DATASOURCE_REF:
        return COMPUTE_EXPRESSION_ATOM_DATASOURCE_REF_EDEFAULT == null ? compute_expression_atom_datasource_ref != null : !COMPUTE_EXPRESSION_ATOM_DATASOURCE_REF_EDEFAULT.equals(compute_expression_atom_datasource_ref);
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__PROJECTION_FLAG_CONDITION:
        return projection_flag_condition != null;
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_DATAITEM_REF:
        return COMPUTE_EXPRESSION_ATOM_DATAITEM_REF_EDEFAULT == null ? compute_expression_atom_dataitem_ref != null : !COMPUTE_EXPRESSION_ATOM_DATAITEM_REF_EDEFAULT.equals(compute_expression_atom_dataitem_ref);
      case MyDslPackage.COMPUTE_EXPRESSION_ATOM__COMPUTE_EXPRESSION_ATOM_VALUE:
        return compute_expression_atom_value != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (compute_expression_atom_datasource_ref: ");
    result.append(compute_expression_atom_datasource_ref);
    result.append(", compute_expression_atom_dataitem_ref: ");
    result.append(compute_expression_atom_dataitem_ref);
    result.append(')');
    return result.toString();
  }

} //compute_expression_atomImpl
