/*
 * generated by Xtext 2.13.0
 */
package io.typefox.xtext.langserver.example.serializer;

import com.google.inject.Inject;
import io.typefox.xtext.langserver.example.myDsl.Domainmodel;
import io.typefox.xtext.langserver.example.myDsl.MainElement;
import io.typefox.xtext.langserver.example.myDsl.MyDslPackage;
import io.typefox.xtext.langserver.example.myDsl.abstract_def;
import io.typefox.xtext.langserver.example.myDsl.action_definition;
import io.typefox.xtext.langserver.example.myDsl.aggregate_check_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.aggregate_definition;
import io.typefox.xtext.langserver.example.myDsl.aggregate_list_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.aggregate_wildcard_definition;
import io.typefox.xtext.langserver.example.myDsl.alter_attribute_definition;
import io.typefox.xtext.langserver.example.myDsl.array_definition;
import io.typefox.xtext.langserver.example.myDsl.available_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.based_on_entity_set_definition;
import io.typefox.xtext.langserver.example.myDsl.batch_sync_daily_policy;
import io.typefox.xtext.langserver.example.myDsl.batch_sync_hourly_policy;
import io.typefox.xtext.langserver.example.myDsl.batch_sync_monthly_policy;
import io.typefox.xtext.langserver.example.myDsl.batch_sync_policy_definition;
import io.typefox.xtext.langserver.example.myDsl.batch_sync_weekday;
import io.typefox.xtext.langserver.example.myDsl.batch_sync_weekly_policy;
import io.typefox.xtext.langserver.example.myDsl.cache_invalidation_after;
import io.typefox.xtext.langserver.example.myDsl.cache_invalidation_definition;
import io.typefox.xtext.langserver.example.myDsl.capability;
import io.typefox.xtext.langserver.example.myDsl.category;
import io.typefox.xtext.langserver.example.myDsl.change_detection_definition;
import io.typefox.xtext.langserver.example.myDsl.client_cache_sync_policy_definition;
import io.typefox.xtext.langserver.example.myDsl.combine_attribute;
import io.typefox.xtext.langserver.example.myDsl.complextype_definition;
import io.typefox.xtext.langserver.example.myDsl.compute_definition;
import io.typefox.xtext.langserver.example.myDsl.compute_expression;
import io.typefox.xtext.langserver.example.myDsl.compute_expression_atom;
import io.typefox.xtext.langserver.example.myDsl.compute_expression_atom_value;
import io.typefox.xtext.langserver.example.myDsl.computeditem_definition;
import io.typefox.xtext.langserver.example.myDsl.copy_definition;
import io.typefox.xtext.langserver.example.myDsl.crud_definition;
import io.typefox.xtext.langserver.example.myDsl.crud_reference;
import io.typefox.xtext.langserver.example.myDsl.dataitem_definition;
import io.typefox.xtext.langserver.example.myDsl.dataitem_reference;
import io.typefox.xtext.langserver.example.myDsl.datasource_definition;
import io.typefox.xtext.langserver.example.myDsl.default_data_definition;
import io.typefox.xtext.langserver.example.myDsl.dependencies_definition;
import io.typefox.xtext.langserver.example.myDsl.dependency_definition;
import io.typefox.xtext.langserver.example.myDsl.description;
import io.typefox.xtext.langserver.example.myDsl.dynamic_component_dependency;
import io.typefox.xtext.langserver.example.myDsl.entity_set_definition;
import io.typefox.xtext.langserver.example.myDsl.enum_lookup_list_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.enumeration_definition;
import io.typefox.xtext.langserver.example.myDsl.enumeration_type_definition_enumeration_type;
import io.typefox.xtext.langserver.example.myDsl.enumeration_value_definition;
import io.typefox.xtext.langserver.example.myDsl.exclude_attributes_definition;
import io.typefox.xtext.langserver.example.myDsl.exclude_details_setting;
import io.typefox.xtext.langserver.example.myDsl.exclude_from_config_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.exec_definition;
import io.typefox.xtext.langserver.example.myDsl.fetch_definition;
import io.typefox.xtext.langserver.example.myDsl.filter_column_definition;
import io.typefox.xtext.langserver.example.myDsl.filter_column_operator;
import io.typefox.xtext.langserver.example.myDsl.filter_column_operator_filter_column_operator_name;
import io.typefox.xtext.langserver.example.myDsl.filter_columns_definition;
import io.typefox.xtext.langserver.example.myDsl.filter_on_entity_setting;
import io.typefox.xtext.langserver.example.myDsl.filtering_context_list_definition;
import io.typefox.xtext.langserver.example.myDsl.filtering_context_property;
import io.typefox.xtext.langserver.example.myDsl.format_definition;
import io.typefox.xtext.langserver.example.myDsl.from_definition;
import io.typefox.xtext.langserver.example.myDsl.function_definition;
import io.typefox.xtext.langserver.example.myDsl.grouped_push_sync_policy_definition;
import io.typefox.xtext.langserver.example.myDsl.guard_condition_definition;
import io.typefox.xtext.langserver.example.myDsl.guard_function;
import io.typefox.xtext.langserver.example.myDsl.identifier;
import io.typefox.xtext.langserver.example.myDsl.implementation_definition;
import io.typefox.xtext.langserver.example.myDsl.implementation_type_definition;
import io.typefox.xtext.langserver.example.myDsl.include_fragment;
import io.typefox.xtext.langserver.example.myDsl.incoming_sync_policy_definition;
import io.typefox.xtext.langserver.example.myDsl.inline_property_setting;
import io.typefox.xtext.langserver.example.myDsl.key_fetch_on_create_flag;
import io.typefox.xtext.langserver.example.myDsl.key_reference;
import io.typefox.xtext.langserver.example.myDsl.keyref_definition;
import io.typefox.xtext.langserver.example.myDsl.keys_definition;
import io.typefox.xtext.langserver.example.myDsl.label_definition;
import io.typefox.xtext.langserver.example.myDsl.language_dependent_definition_language_dependent_type;
import io.typefox.xtext.langserver.example.myDsl.layer_specification;
import io.typefox.xtext.langserver.example.myDsl.lov_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.lu_definition;
import io.typefox.xtext.langserver.example.myDsl.luname_definition;
import io.typefox.xtext.langserver.example.myDsl.mandatory_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.mapping_arguments;
import io.typefox.xtext.langserver.example.myDsl.maxlength_definition;
import io.typefox.xtext.langserver.example.myDsl.null_image;
import io.typefox.xtext.langserver.example.myDsl.null_image_null_match;
import io.typefox.xtext.langserver.example.myDsl.objkey_column;
import io.typefox.xtext.langserver.example.myDsl.objkey_mapping;
import io.typefox.xtext.langserver.example.myDsl.offline_filter_definition;
import io.typefox.xtext.langserver.example.myDsl.offline_sync_policy_definition;
import io.typefox.xtext.langserver.example.myDsl.online_only_sync_policy_definition;
import io.typefox.xtext.langserver.example.myDsl.override;
import io.typefox.xtext.langserver.example.myDsl.overtake;
import io.typefox.xtext.langserver.example.myDsl.ownership_query_definition;
import io.typefox.xtext.langserver.example.myDsl.parameter_definition;
import io.typefox.xtext.langserver.example.myDsl.prefetch_definition;
import io.typefox.xtext.langserver.example.myDsl.projection_component;
import io.typefox.xtext.langserver.example.myDsl.projection_flag_condition;
import io.typefox.xtext.langserver.example.myDsl.projection_flag_condition_atom;
import io.typefox.xtext.langserver.example.myDsl.projection_flag_condition_atom_value;
import io.typefox.xtext.langserver.example.myDsl.projection_name;
import io.typefox.xtext.langserver.example.myDsl.push_sync_policy_definition;
import io.typefox.xtext.langserver.example.myDsl.query_definition;
import io.typefox.xtext.langserver.example.myDsl.regexp_definition;
import io.typefox.xtext.langserver.example.myDsl.server_insertable_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.server_package_reference;
import io.typefox.xtext.langserver.example.myDsl.server_updatable_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.service_group;
import io.typefox.xtext.langserver.example.myDsl.singleton_set_definition;
import io.typefox.xtext.langserver.example.myDsl.state_event_definition;
import io.typefox.xtext.langserver.example.myDsl.statemachine_definition;
import io.typefox.xtext.langserver.example.myDsl.stream_attachment_attribute;
import io.typefox.xtext.langserver.example.myDsl.stream_file_info_definition;
import io.typefox.xtext.langserver.example.myDsl.stream_file_name_attribute;
import io.typefox.xtext.langserver.example.myDsl.stream_mime_type_attribute;
import io.typefox.xtext.langserver.example.myDsl.summary_definition;
import io.typefox.xtext.langserver.example.myDsl.support_file_info_flag;
import io.typefox.xtext.langserver.example.myDsl.support_warnings_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.sync_group_definition;
import io.typefox.xtext.langserver.example.myDsl.sync_schedule_definition;
import io.typefox.xtext.langserver.example.myDsl.tag_definition;
import io.typefox.xtext.langserver.example.myDsl.tag_intersect_definition;
import io.typefox.xtext.langserver.example.myDsl.tag_minus_definition;
import io.typefox.xtext.langserver.example.myDsl.tag_union_definition;
import io.typefox.xtext.langserver.example.myDsl.target_table;
import io.typefox.xtext.langserver.example.myDsl.to_function_definition;
import io.typefox.xtext.langserver.example.myDsl.to_reference_definition;
import io.typefox.xtext.langserver.example.myDsl.transaction_group_definition;
import io.typefox.xtext.langserver.example.myDsl.trigger;
import io.typefox.xtext.langserver.example.myDsl.trigger_attribute;
import io.typefox.xtext.langserver.example.myDsl.trigger_attribute_table_columns;
import io.typefox.xtext.langserver.example.myDsl.trigger_attributes;
import io.typefox.xtext.langserver.example.myDsl.trigger_on_definition;
import io.typefox.xtext.langserver.example.myDsl.type_definition;
import io.typefox.xtext.langserver.example.myDsl.updatable_flag_setting;
import io.typefox.xtext.langserver.example.myDsl.use_attributes_definition;
import io.typefox.xtext.langserver.example.myDsl.user_column_definition;
import io.typefox.xtext.langserver.example.myDsl.user_filter_definition;
import io.typefox.xtext.langserver.example.myDsl.user_filter_reference;
import io.typefox.xtext.langserver.example.myDsl.validate_action_reference;
import io.typefox.xtext.langserver.example.myDsl.validation_definition;
import io.typefox.xtext.langserver.example.myDsl.view_filter_definition;
import io.typefox.xtext.langserver.example.myDsl.virtual_definition;
import io.typefox.xtext.langserver.example.myDsl.warnings_enabled_flag;
import io.typefox.xtext.langserver.example.myDsl.where_definition;
import io.typefox.xtext.langserver.example.myDsl.where_filter_definition;
import io.typefox.xtext.langserver.example.services.MyDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.DOMAINMODEL:
				sequence_Domainmodel(context, (Domainmodel) semanticObject); 
				return; 
			case MyDslPackage.MAIN_ELEMENT:
				sequence_MainElement(context, (MainElement) semanticObject); 
				return; 
			case MyDslPackage.ABSTRACT_DEF:
				if (rule == grammarAccess.getMainElementRule()) {
					sequence_MainElement_abstract_def(context, (abstract_def) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAbstract_defRule()) {
					sequence_abstract_def(context, (abstract_def) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.ACTION_DEFINITION:
				sequence_action_definition(context, (action_definition) semanticObject); 
				return; 
			case MyDslPackage.AGGREGATE_CHECK_FLAG_SETTING:
				sequence_aggregate_check_flag_setting(context, (aggregate_check_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.AGGREGATE_DEFINITION:
				sequence_aggregate_definition(context, (aggregate_definition) semanticObject); 
				return; 
			case MyDslPackage.AGGREGATE_LIST_FLAG_SETTING:
				sequence_aggregate_list_flag_setting(context, (aggregate_list_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.AGGREGATE_WILDCARD_DEFINITION:
				sequence_aggregate_wildcard_definition(context, (aggregate_wildcard_definition) semanticObject); 
				return; 
			case MyDslPackage.ALTER_ATTRIBUTE_DEFINITION:
				sequence_alter_attribute_definition(context, (alter_attribute_definition) semanticObject); 
				return; 
			case MyDslPackage.ARRAY_DEFINITION:
				sequence_array_definition(context, (array_definition) semanticObject); 
				return; 
			case MyDslPackage.AVAILABLE_FLAG_SETTING:
				sequence_available_flag_setting(context, (available_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.BASED_ON_ENTITY_SET_DEFINITION:
				sequence_based_on_entity_set_definition(context, (based_on_entity_set_definition) semanticObject); 
				return; 
			case MyDslPackage.BATCH_SYNC_DAILY_POLICY:
				if (rule == grammarAccess.getSync_schedule_definitionRule()
						|| rule == grammarAccess.getBatch_sync_daily_policyRule()) {
					sequence_batch_sync_daily_policy(context, (batch_sync_daily_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBatch_sync_policy_definitionRule()) {
					sequence_batch_sync_daily_policy_batch_sync_policy_definition(context, (batch_sync_daily_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSync_policy_definitionRule()) {
					sequence_batch_sync_daily_policy_batch_sync_policy_definition_grouped_push_sync_policy_definition_push_sync_policy_definition(context, (batch_sync_daily_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGrouped_push_sync_policy_definitionRule()) {
					sequence_batch_sync_daily_policy_grouped_push_sync_policy_definition(context, (batch_sync_daily_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPush_sync_policy_definitionRule()) {
					sequence_batch_sync_daily_policy_push_sync_policy_definition(context, (batch_sync_daily_policy) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.BATCH_SYNC_HOURLY_POLICY:
				if (rule == grammarAccess.getSync_schedule_definitionRule()
						|| rule == grammarAccess.getBatch_sync_hourly_policyRule()) {
					sequence_batch_sync_hourly_policy(context, (batch_sync_hourly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBatch_sync_policy_definitionRule()) {
					sequence_batch_sync_hourly_policy_batch_sync_policy_definition(context, (batch_sync_hourly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSync_policy_definitionRule()) {
					sequence_batch_sync_hourly_policy_batch_sync_policy_definition_grouped_push_sync_policy_definition_push_sync_policy_definition(context, (batch_sync_hourly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGrouped_push_sync_policy_definitionRule()) {
					sequence_batch_sync_hourly_policy_grouped_push_sync_policy_definition(context, (batch_sync_hourly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPush_sync_policy_definitionRule()) {
					sequence_batch_sync_hourly_policy_push_sync_policy_definition(context, (batch_sync_hourly_policy) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.BATCH_SYNC_MONTHLY_POLICY:
				if (rule == grammarAccess.getSync_schedule_definitionRule()
						|| rule == grammarAccess.getBatch_sync_monthly_policyRule()) {
					sequence_batch_sync_monthly_policy(context, (batch_sync_monthly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBatch_sync_policy_definitionRule()) {
					sequence_batch_sync_monthly_policy_batch_sync_policy_definition(context, (batch_sync_monthly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSync_policy_definitionRule()) {
					sequence_batch_sync_monthly_policy_batch_sync_policy_definition_grouped_push_sync_policy_definition_push_sync_policy_definition(context, (batch_sync_monthly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGrouped_push_sync_policy_definitionRule()) {
					sequence_batch_sync_monthly_policy_grouped_push_sync_policy_definition(context, (batch_sync_monthly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPush_sync_policy_definitionRule()) {
					sequence_batch_sync_monthly_policy_push_sync_policy_definition(context, (batch_sync_monthly_policy) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.BATCH_SYNC_POLICY_DEFINITION:
				sequence_batch_sync_policy_definition(context, (batch_sync_policy_definition) semanticObject); 
				return; 
			case MyDslPackage.BATCH_SYNC_WEEKDAY:
				sequence_batch_sync_weekday(context, (batch_sync_weekday) semanticObject); 
				return; 
			case MyDslPackage.BATCH_SYNC_WEEKLY_POLICY:
				if (rule == grammarAccess.getBatch_sync_policy_definitionRule()) {
					sequence_batch_sync_policy_definition_batch_sync_weekly_policy(context, (batch_sync_weekly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSync_policy_definitionRule()) {
					sequence_batch_sync_policy_definition_batch_sync_weekly_policy_grouped_push_sync_policy_definition_push_sync_policy_definition(context, (batch_sync_weekly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSync_schedule_definitionRule()
						|| rule == grammarAccess.getBatch_sync_weekly_policyRule()) {
					sequence_batch_sync_weekly_policy(context, (batch_sync_weekly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGrouped_push_sync_policy_definitionRule()) {
					sequence_batch_sync_weekly_policy_grouped_push_sync_policy_definition(context, (batch_sync_weekly_policy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPush_sync_policy_definitionRule()) {
					sequence_batch_sync_weekly_policy_push_sync_policy_definition(context, (batch_sync_weekly_policy) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.CACHE_INVALIDATION_AFTER:
				sequence_cache_invalidation_after(context, (cache_invalidation_after) semanticObject); 
				return; 
			case MyDslPackage.CACHE_INVALIDATION_DEFINITION:
				sequence_cache_invalidation_definition(context, (cache_invalidation_definition) semanticObject); 
				return; 
			case MyDslPackage.CAPABILITY:
				sequence_capability(context, (capability) semanticObject); 
				return; 
			case MyDslPackage.CATEGORY:
				sequence_category(context, (category) semanticObject); 
				return; 
			case MyDslPackage.CHANGE_DETECTION_DEFINITION:
				sequence_change_detection_definition(context, (change_detection_definition) semanticObject); 
				return; 
			case MyDslPackage.CLIENT_CACHE_SYNC_POLICY_DEFINITION:
				sequence_client_cache_sync_policy_definition(context, (client_cache_sync_policy_definition) semanticObject); 
				return; 
			case MyDslPackage.COMBINE_ATTRIBUTE:
				sequence_combine_attribute(context, (combine_attribute) semanticObject); 
				return; 
			case MyDslPackage.COMPLEXTYPE_DEFINITION:
				sequence_complextype_definition(context, (complextype_definition) semanticObject); 
				return; 
			case MyDslPackage.COMPUTE_DEFINITION:
				sequence_compute_definition(context, (compute_definition) semanticObject); 
				return; 
			case MyDslPackage.COMPUTE_EXPRESSION:
				sequence_compute_expression(context, (compute_expression) semanticObject); 
				return; 
			case MyDslPackage.COMPUTE_EXPRESSION_ATOM:
				sequence_compute_expression_atom(context, (compute_expression_atom) semanticObject); 
				return; 
			case MyDslPackage.COMPUTE_EXPRESSION_ATOM_VALUE:
				sequence_compute_expression_atom_value(context, (compute_expression_atom_value) semanticObject); 
				return; 
			case MyDslPackage.COMPUTEDITEM_DEFINITION:
				sequence_computeditem_definition(context, (computeditem_definition) semanticObject); 
				return; 
			case MyDslPackage.COPY_DEFINITION:
				sequence_copy_definition(context, (copy_definition) semanticObject); 
				return; 
			case MyDslPackage.CRUD_DEFINITION:
				sequence_crud_definition(context, (crud_definition) semanticObject); 
				return; 
			case MyDslPackage.CRUD_REFERENCE:
				sequence_crud_reference(context, (crud_reference) semanticObject); 
				return; 
			case MyDslPackage.DATAITEM_DEFINITION:
				sequence_dataitem_definition(context, (dataitem_definition) semanticObject); 
				return; 
			case MyDslPackage.DATAITEM_REFERENCE:
				sequence_dataitem_reference(context, (dataitem_reference) semanticObject); 
				return; 
			case MyDslPackage.DATASOURCE_DEFINITION:
				sequence_datasource_definition(context, (datasource_definition) semanticObject); 
				return; 
			case MyDslPackage.DEFAULT_DATA_DEFINITION:
				sequence_default_data_definition(context, (default_data_definition) semanticObject); 
				return; 
			case MyDslPackage.DEPENDENCIES_DEFINITION:
				sequence_dependencies_definition(context, (dependencies_definition) semanticObject); 
				return; 
			case MyDslPackage.DEPENDENCY_DEFINITION:
				sequence_dependency_definition(context, (dependency_definition) semanticObject); 
				return; 
			case MyDslPackage.DESCRIPTION:
				sequence_description(context, (description) semanticObject); 
				return; 
			case MyDslPackage.DYNAMIC_COMPONENT_DEPENDENCY:
				sequence_dynamic_component_dependency(context, (dynamic_component_dependency) semanticObject); 
				return; 
			case MyDslPackage.ENTITY_SET_DEFINITION:
				sequence_entity_set_definition(context, (entity_set_definition) semanticObject); 
				return; 
			case MyDslPackage.ENUM_LOOKUP_LIST_FLAG_SETTING:
				sequence_enum_lookup_list_flag_setting(context, (enum_lookup_list_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.ENUMERATION_DEFINITION:
				sequence_enumeration_definition(context, (enumeration_definition) semanticObject); 
				return; 
			case MyDslPackage.ENUMERATION_TYPE_DEFINITION_ENUMERATION_TYPE:
				sequence_enumeration_type_definition_enumeration_type(context, (enumeration_type_definition_enumeration_type) semanticObject); 
				return; 
			case MyDslPackage.ENUMERATION_VALUE_DEFINITION:
				sequence_enumeration_value_definition(context, (enumeration_value_definition) semanticObject); 
				return; 
			case MyDslPackage.EXCLUDE_ATTRIBUTES_DEFINITION:
				sequence_exclude_attributes_definition(context, (exclude_attributes_definition) semanticObject); 
				return; 
			case MyDslPackage.EXCLUDE_DETAILS_SETTING:
				sequence_exclude_details_setting(context, (exclude_details_setting) semanticObject); 
				return; 
			case MyDslPackage.EXCLUDE_FROM_CONFIG_FLAG_SETTING:
				sequence_exclude_from_config_flag_setting(context, (exclude_from_config_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.EXEC_DEFINITION:
				sequence_exec_definition(context, (exec_definition) semanticObject); 
				return; 
			case MyDslPackage.FETCH_DEFINITION:
				sequence_fetch_definition(context, (fetch_definition) semanticObject); 
				return; 
			case MyDslPackage.FILTER_COLUMN_DEFINITION:
				sequence_filter_column_definition(context, (filter_column_definition) semanticObject); 
				return; 
			case MyDslPackage.FILTER_COLUMN_OPERATOR:
				sequence_filter_column_operator(context, (filter_column_operator) semanticObject); 
				return; 
			case MyDslPackage.FILTER_COLUMN_OPERATOR_FILTER_COLUMN_OPERATOR_NAME:
				sequence_filter_column_operator_filter_column_operator_name(context, (filter_column_operator_filter_column_operator_name) semanticObject); 
				return; 
			case MyDslPackage.FILTER_COLUMNS_DEFINITION:
				sequence_filter_columns_definition(context, (filter_columns_definition) semanticObject); 
				return; 
			case MyDslPackage.FILTER_ON_ENTITY_SETTING:
				sequence_filter_on_entity_setting(context, (filter_on_entity_setting) semanticObject); 
				return; 
			case MyDslPackage.FILTERING_CONTEXT_LIST_DEFINITION:
				sequence_filtering_context_list_definition(context, (filtering_context_list_definition) semanticObject); 
				return; 
			case MyDslPackage.FILTERING_CONTEXT_PROPERTY:
				sequence_filtering_context_property(context, (filtering_context_property) semanticObject); 
				return; 
			case MyDslPackage.FORMAT_DEFINITION:
				sequence_format_definition(context, (format_definition) semanticObject); 
				return; 
			case MyDslPackage.FROM_DEFINITION:
				sequence_from_definition(context, (from_definition) semanticObject); 
				return; 
			case MyDslPackage.FUNCTION_DEFINITION:
				sequence_function_definition(context, (function_definition) semanticObject); 
				return; 
			case MyDslPackage.GROUPED_PUSH_SYNC_POLICY_DEFINITION:
				sequence_grouped_push_sync_policy_definition(context, (grouped_push_sync_policy_definition) semanticObject); 
				return; 
			case MyDslPackage.GUARD_CONDITION_DEFINITION:
				sequence_guard_condition_definition(context, (guard_condition_definition) semanticObject); 
				return; 
			case MyDslPackage.GUARD_FUNCTION:
				sequence_guard_function(context, (guard_function) semanticObject); 
				return; 
			case MyDslPackage.IDENTIFIER:
				sequence_identifier(context, (identifier) semanticObject); 
				return; 
			case MyDslPackage.IMPLEMENTATION_DEFINITION:
				sequence_implementation_definition(context, (implementation_definition) semanticObject); 
				return; 
			case MyDslPackage.IMPLEMENTATION_TYPE_DEFINITION:
				sequence_implementation_type_definition(context, (implementation_type_definition) semanticObject); 
				return; 
			case MyDslPackage.INCLUDE_FRAGMENT:
				sequence_include_fragment(context, (include_fragment) semanticObject); 
				return; 
			case MyDslPackage.INCOMING_SYNC_POLICY_DEFINITION:
				sequence_incoming_sync_policy_definition(context, (incoming_sync_policy_definition) semanticObject); 
				return; 
			case MyDslPackage.INLINE_PROPERTY_SETTING:
				sequence_inline_property_setting(context, (inline_property_setting) semanticObject); 
				return; 
			case MyDslPackage.KEY_FETCH_ON_CREATE_FLAG:
				sequence_key_fetch_on_create_flag(context, (key_fetch_on_create_flag) semanticObject); 
				return; 
			case MyDslPackage.KEY_REFERENCE:
				sequence_key_reference(context, (key_reference) semanticObject); 
				return; 
			case MyDslPackage.KEYREF_DEFINITION:
				sequence_keyref_definition(context, (keyref_definition) semanticObject); 
				return; 
			case MyDslPackage.KEYS_DEFINITION:
				sequence_keys_definition(context, (keys_definition) semanticObject); 
				return; 
			case MyDslPackage.LABEL_DEFINITION:
				sequence_label_definition(context, (label_definition) semanticObject); 
				return; 
			case MyDslPackage.LANGUAGE_DEPENDENT_DEFINITION_LANGUAGE_DEPENDENT_TYPE:
				sequence_language_dependent_definition_language_dependent_type(context, (language_dependent_definition_language_dependent_type) semanticObject); 
				return; 
			case MyDslPackage.LAYER_SPECIFICATION:
				sequence_layer_specification(context, (layer_specification) semanticObject); 
				return; 
			case MyDslPackage.LOV_FLAG_SETTING:
				sequence_lov_flag_setting(context, (lov_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.LU_DEFINITION:
				sequence_lu_definition(context, (lu_definition) semanticObject); 
				return; 
			case MyDslPackage.LUNAME_DEFINITION:
				sequence_luname_definition(context, (luname_definition) semanticObject); 
				return; 
			case MyDslPackage.MANDATORY_FLAG_SETTING:
				sequence_mandatory_flag_setting(context, (mandatory_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.MAPPING_ARGUMENTS:
				sequence_mapping_arguments(context, (mapping_arguments) semanticObject); 
				return; 
			case MyDslPackage.MAXLENGTH_DEFINITION:
				sequence_maxlength_definition(context, (maxlength_definition) semanticObject); 
				return; 
			case MyDslPackage.NULL_IMAGE:
				sequence_null_image(context, (null_image) semanticObject); 
				return; 
			case MyDslPackage.NULL_IMAGE_NULL_MATCH:
				sequence_null_image_null_match(context, (null_image_null_match) semanticObject); 
				return; 
			case MyDslPackage.OBJKEY_COLUMN:
				sequence_objkey_column(context, (objkey_column) semanticObject); 
				return; 
			case MyDslPackage.OBJKEY_MAPPING:
				sequence_objkey_mapping(context, (objkey_mapping) semanticObject); 
				return; 
			case MyDslPackage.OFFLINE_FILTER_DEFINITION:
				sequence_offline_filter_definition(context, (offline_filter_definition) semanticObject); 
				return; 
			case MyDslPackage.OFFLINE_SYNC_POLICY_DEFINITION:
				sequence_offline_sync_policy_definition(context, (offline_sync_policy_definition) semanticObject); 
				return; 
			case MyDslPackage.ONLINE_ONLY_SYNC_POLICY_DEFINITION:
				sequence_online_only_sync_policy_definition(context, (online_only_sync_policy_definition) semanticObject); 
				return; 
			case MyDslPackage.OVERRIDE:
				sequence_override(context, (override) semanticObject); 
				return; 
			case MyDslPackage.OVERTAKE:
				sequence_overtake(context, (overtake) semanticObject); 
				return; 
			case MyDslPackage.OWNERSHIP_QUERY_DEFINITION:
				sequence_ownership_query_definition(context, (ownership_query_definition) semanticObject); 
				return; 
			case MyDslPackage.PARAMETER_DEFINITION:
				sequence_parameter_definition(context, (parameter_definition) semanticObject); 
				return; 
			case MyDslPackage.PREFETCH_DEFINITION:
				sequence_prefetch_definition(context, (prefetch_definition) semanticObject); 
				return; 
			case MyDslPackage.PROJECTION_COMPONENT:
				sequence_projection_component(context, (projection_component) semanticObject); 
				return; 
			case MyDslPackage.PROJECTION_FLAG_CONDITION:
				sequence_projection_flag_condition(context, (projection_flag_condition) semanticObject); 
				return; 
			case MyDslPackage.PROJECTION_FLAG_CONDITION_ATOM:
				sequence_projection_flag_condition_atom(context, (projection_flag_condition_atom) semanticObject); 
				return; 
			case MyDslPackage.PROJECTION_FLAG_CONDITION_ATOM_VALUE:
				sequence_projection_flag_condition_atom_value(context, (projection_flag_condition_atom_value) semanticObject); 
				return; 
			case MyDslPackage.PROJECTION_NAME:
				sequence_projection_name(context, (projection_name) semanticObject); 
				return; 
			case MyDslPackage.PUSH_SYNC_POLICY_DEFINITION:
				sequence_push_sync_policy_definition(context, (push_sync_policy_definition) semanticObject); 
				return; 
			case MyDslPackage.QUERY_DEFINITION:
				sequence_query_definition(context, (query_definition) semanticObject); 
				return; 
			case MyDslPackage.REGEXP_DEFINITION:
				sequence_regexp_definition(context, (regexp_definition) semanticObject); 
				return; 
			case MyDslPackage.SERVER_INSERTABLE_FLAG_SETTING:
				sequence_server_insertable_flag_setting(context, (server_insertable_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.SERVER_PACKAGE_REFERENCE:
				sequence_server_package_reference(context, (server_package_reference) semanticObject); 
				return; 
			case MyDslPackage.SERVER_UPDATABLE_FLAG_SETTING:
				sequence_server_updatable_flag_setting(context, (server_updatable_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.SERVICE_GROUP:
				sequence_service_group(context, (service_group) semanticObject); 
				return; 
			case MyDslPackage.SINGLETON_SET_DEFINITION:
				sequence_singleton_set_definition(context, (singleton_set_definition) semanticObject); 
				return; 
			case MyDslPackage.STATE_EVENT_DEFINITION:
				sequence_state_event_definition(context, (state_event_definition) semanticObject); 
				return; 
			case MyDslPackage.STATEMACHINE_DEFINITION:
				sequence_statemachine_definition(context, (statemachine_definition) semanticObject); 
				return; 
			case MyDslPackage.STREAM_ATTACHMENT_ATTRIBUTE:
				sequence_stream_attachment_attribute(context, (stream_attachment_attribute) semanticObject); 
				return; 
			case MyDslPackage.STREAM_FILE_INFO_DEFINITION:
				sequence_stream_file_info_definition(context, (stream_file_info_definition) semanticObject); 
				return; 
			case MyDslPackage.STREAM_FILE_NAME_ATTRIBUTE:
				sequence_stream_file_name_attribute(context, (stream_file_name_attribute) semanticObject); 
				return; 
			case MyDslPackage.STREAM_MIME_TYPE_ATTRIBUTE:
				sequence_stream_mime_type_attribute(context, (stream_mime_type_attribute) semanticObject); 
				return; 
			case MyDslPackage.SUMMARY_DEFINITION:
				sequence_summary_definition(context, (summary_definition) semanticObject); 
				return; 
			case MyDslPackage.SUPPORT_FILE_INFO_FLAG:
				sequence_support_file_info_flag(context, (support_file_info_flag) semanticObject); 
				return; 
			case MyDslPackage.SUPPORT_WARNINGS_FLAG_SETTING:
				sequence_support_warnings_flag_setting(context, (support_warnings_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.SYNC_GROUP_DEFINITION:
				sequence_sync_group_definition(context, (sync_group_definition) semanticObject); 
				return; 
			case MyDslPackage.SYNC_SCHEDULE_DEFINITION:
				if (rule == grammarAccess.getSync_policy_definitionRule()) {
					sequence_batch_sync_policy_definition_grouped_push_sync_policy_definition_push_sync_policy_definition_sync_schedule_definition(context, (sync_schedule_definition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBatch_sync_policy_definitionRule()) {
					sequence_batch_sync_policy_definition_sync_schedule_definition(context, (sync_schedule_definition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGrouped_push_sync_policy_definitionRule()) {
					sequence_grouped_push_sync_policy_definition_sync_schedule_definition(context, (sync_schedule_definition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPush_sync_policy_definitionRule()) {
					sequence_push_sync_policy_definition_sync_schedule_definition(context, (sync_schedule_definition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSync_schedule_definitionRule()) {
					sequence_sync_schedule_definition(context, (sync_schedule_definition) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.TAG_DEFINITION:
				sequence_tag_definition(context, (tag_definition) semanticObject); 
				return; 
			case MyDslPackage.TAG_INTERSECT_DEFINITION:
				sequence_tag_intersect_definition(context, (tag_intersect_definition) semanticObject); 
				return; 
			case MyDslPackage.TAG_MINUS_DEFINITION:
				sequence_tag_minus_definition(context, (tag_minus_definition) semanticObject); 
				return; 
			case MyDslPackage.TAG_UNION_DEFINITION:
				sequence_tag_union_definition(context, (tag_union_definition) semanticObject); 
				return; 
			case MyDslPackage.TARGET_TABLE:
				sequence_target_table(context, (target_table) semanticObject); 
				return; 
			case MyDslPackage.TO_FUNCTION_DEFINITION:
				sequence_to_function_definition(context, (to_function_definition) semanticObject); 
				return; 
			case MyDslPackage.TO_REFERENCE_DEFINITION:
				sequence_to_reference_definition(context, (to_reference_definition) semanticObject); 
				return; 
			case MyDslPackage.TRANSACTION_GROUP_DEFINITION:
				sequence_transaction_group_definition(context, (transaction_group_definition) semanticObject); 
				return; 
			case MyDslPackage.TRIGGER:
				sequence_trigger(context, (trigger) semanticObject); 
				return; 
			case MyDslPackage.TRIGGER_ATTRIBUTE:
				sequence_trigger_attribute(context, (trigger_attribute) semanticObject); 
				return; 
			case MyDslPackage.TRIGGER_ATTRIBUTE_TABLE_COLUMNS:
				sequence_trigger_attribute_table_columns(context, (trigger_attribute_table_columns) semanticObject); 
				return; 
			case MyDslPackage.TRIGGER_ATTRIBUTES:
				sequence_trigger_attributes(context, (trigger_attributes) semanticObject); 
				return; 
			case MyDslPackage.TRIGGER_ON_DEFINITION:
				sequence_trigger_on_definition(context, (trigger_on_definition) semanticObject); 
				return; 
			case MyDslPackage.TYPE_DEFINITION:
				sequence_type_definition(context, (type_definition) semanticObject); 
				return; 
			case MyDslPackage.UPDATABLE_FLAG_SETTING:
				sequence_updatable_flag_setting(context, (updatable_flag_setting) semanticObject); 
				return; 
			case MyDslPackage.USE_ATTRIBUTES_DEFINITION:
				sequence_use_attributes_definition(context, (use_attributes_definition) semanticObject); 
				return; 
			case MyDslPackage.USER_COLUMN_DEFINITION:
				sequence_user_column_definition(context, (user_column_definition) semanticObject); 
				return; 
			case MyDslPackage.USER_FILTER_DEFINITION:
				sequence_user_filter_definition(context, (user_filter_definition) semanticObject); 
				return; 
			case MyDslPackage.USER_FILTER_REFERENCE:
				sequence_user_filter_reference(context, (user_filter_reference) semanticObject); 
				return; 
			case MyDslPackage.VALIDATE_ACTION_REFERENCE:
				sequence_validate_action_reference(context, (validate_action_reference) semanticObject); 
				return; 
			case MyDslPackage.VALIDATION_DEFINITION:
				sequence_validation_definition(context, (validation_definition) semanticObject); 
				return; 
			case MyDslPackage.VIEW_FILTER_DEFINITION:
				sequence_view_filter_definition(context, (view_filter_definition) semanticObject); 
				return; 
			case MyDslPackage.VIRTUAL_DEFINITION:
				sequence_virtual_definition(context, (virtual_definition) semanticObject); 
				return; 
			case MyDslPackage.WARNINGS_ENABLED_FLAG:
				sequence_warnings_enabled_flag(context, (warnings_enabled_flag) semanticObject); 
				return; 
			case MyDslPackage.WHERE_DEFINITION:
				sequence_where_definition(context, (where_definition) semanticObject); 
				return; 
			case MyDslPackage.WHERE_FILTER_DEFINITION:
				sequence_where_filter_definition(context, (where_filter_definition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Domainmodel returns Domainmodel
	 *
	 * Constraint:
	 *     (elements+=projection_name elements+=projection_component elements+=layer_specification elements+=description elements+=MainElement*)
	 */
	protected void sequence_Domainmodel(ISerializationContext context, Domainmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns MainElement
	 *
	 * Constraint:
	 *     (virtual_definition=virtual_definition | query_definition=query_definition)?
	 */
	protected void sequence_MainElement(ISerializationContext context, MainElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns abstract_def
	 *
	 * Constraint:
	 *     (annotation='@Abstract' (virtual_definition=virtual_definition | query_definition=query_definition))
	 */
	protected void sequence_MainElement_abstract_def(ISerializationContext context, abstract_def semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     abstract_def returns abstract_def
	 *
	 * Constraint:
	 *     annotation='@Abstract'
	 */
	protected void sequence_abstract_def(ISerializationContext context, abstract_def semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ABSTRACT_DEF__ANNOTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ABSTRACT_DEF__ANNOTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAbstract_defAccess().getAnnotationAbstractKeyword_0(), semanticObject.getAnnotation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns action_definition
	 *     action_definition returns action_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         action_definition_action_name=ID 
	 *         type_definition=type_definition? 
	 *         implementation_definition=implementation_definition? 
	 *         dependency_definition=dependency_definition? 
	 *         (
	 *             alt=label_definition | 
	 *             alt=dependencies_definition | 
	 *             alt=mandatory_flag_setting | 
	 *             alt=parameter_definition | 
	 *             alt=available_flag_setting | 
	 *             alt=transaction_group_definition | 
	 *             offline_sync_policy_definition=offline_sync_policy_definition | 
	 *             support_warnings_flag_setting=support_warnings_flag_setting
	 *         )*
	 *     )
	 */
	protected void sequence_action_definition(ISerializationContext context, action_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     aggregate_check_flag_setting returns aggregate_check_flag_setting
	 *
	 * Constraint:
	 *     keyword='existcheck'
	 */
	protected void sequence_aggregate_check_flag_setting(ISerializationContext context, aggregate_check_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.AGGREGATE_CHECK_FLAG_SETTING__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.AGGREGATE_CHECK_FLAG_SETTING__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAggregate_check_flag_settingAccess().getKeywordExistcheckKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     aggregate_definition returns aggregate_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         aggregate_definition_aggregate_name=ID 
	 *         (key_reference=key_reference key_reference2=key_reference*)? 
	 *         (
	 *             (dataitem_reference=dataitem_reference (dataitem_reference2=dataitem_reference dataitem_reference3=dataitem_reference*)?) | 
	 *             (
	 *                 to_reference_definition=to_reference_definition 
	 *                 to_function_definition=to_function_definition? 
	 *                 (
	 *                     (
	 *                         label_definition=label_definition | 
	 *                         prefetch_definition=prefetch_definition | 
	 *                         copy_definition=copy_definition | 
	 *                         aggregate_list_flag_setting=aggregate_list_flag_setting | 
	 *                         alt=aggregate_check_flag_setting | 
	 *                         aggregate_wildcard_definition=aggregate_wildcard_definition
	 *                     )? 
	 *                     (where_definition=where_definition where_filter_definition=where_filter_definition?)?
	 *                 )+
	 *             )
	 *         )?
	 *     )
	 */
	protected void sequence_aggregate_definition(ISerializationContext context, aggregate_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     aggregate_list_flag_setting returns aggregate_list_flag_setting
	 *
	 * Constraint:
	 *     projection_flag_condition=projection_flag_condition
	 */
	protected void sequence_aggregate_list_flag_setting(ISerializationContext context, aggregate_list_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.AGGREGATE_LIST_FLAG_SETTING__PROJECTION_FLAG_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.AGGREGATE_LIST_FLAG_SETTING__PROJECTION_FLAG_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAggregate_list_flag_settingAccess().getProjection_flag_conditionProjection_flag_conditionParserRuleCall_3_0(), semanticObject.getProjection_flag_condition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     aggregate_wildcard_definition returns aggregate_wildcard_definition
	 *
	 * Constraint:
	 *     aggregate_wildcard_definition_wildcard_token=STRING
	 */
	protected void sequence_aggregate_wildcard_definition(ISerializationContext context, aggregate_wildcard_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.AGGREGATE_WILDCARD_DEFINITION__AGGREGATE_WILDCARD_DEFINITION_WILDCARD_TOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.AGGREGATE_WILDCARD_DEFINITION__AGGREGATE_WILDCARD_DEFINITION_WILDCARD_TOKEN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAggregate_wildcard_definitionAccess().getAggregate_wildcard_definition_wildcard_tokenSTRINGTerminalRuleCall_2_0(), semanticObject.getAggregate_wildcard_definition_wildcard_token());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     alter_attribute_definition returns alter_attribute_definition
	 *
	 * Constraint:
	 *     (alter_attribute_definition_dataitem_name=ID fetch_definition=fetch_definition+)
	 */
	protected void sequence_alter_attribute_definition(ISerializationContext context, alter_attribute_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     array_definition returns array_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         array_definition_array_name=ID 
	 *         (key_reference=key_reference key_reference2=key_reference*)? 
	 *         to_reference_definition=to_reference_definition 
	 *         (
	 *             where_definition=where_definition | 
	 *             filtering_context_definition=filtering_context_definition | 
	 *             offline_filter_definition=offline_filter_definition
	 *         )*
	 *     )
	 */
	protected void sequence_array_definition(ISerializationContext context, array_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     available_flag_setting returns available_flag_setting
	 *
	 * Constraint:
	 *     projection_flag_condition=projection_flag_condition
	 */
	protected void sequence_available_flag_setting(ISerializationContext context, available_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.AVAILABLE_FLAG_SETTING__PROJECTION_FLAG_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.AVAILABLE_FLAG_SETTING__PROJECTION_FLAG_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAvailable_flag_settingAccess().getProjection_flag_conditionProjection_flag_conditionParserRuleCall_3_0(), semanticObject.getProjection_flag_condition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     based_on_entity_set_definition returns based_on_entity_set_definition
	 *
	 * Constraint:
	 *     based_on_entity_set_definition_name_entity_set=ID
	 */
	protected void sequence_based_on_entity_set_definition(ISerializationContext context, based_on_entity_set_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BASED_ON_ENTITY_SET_DEFINITION__BASED_ON_ENTITY_SET_DEFINITION_NAME_ENTITY_SET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BASED_ON_ENTITY_SET_DEFINITION__BASED_ON_ENTITY_SET_DEFINITION_NAME_ENTITY_SET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBased_on_entity_set_definitionAccess().getBased_on_entity_set_definition_name_entity_setIDTerminalRuleCall_1_0(), semanticObject.getBased_on_entity_set_definition_name_entity_set());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     sync_schedule_definition returns batch_sync_daily_policy
	 *     batch_sync_daily_policy returns batch_sync_daily_policy
	 *
	 * Constraint:
	 *     batch_sync_daily_policy_time=TIME
	 */
	protected void sequence_batch_sync_daily_policy(ISerializationContext context, batch_sync_daily_policy semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BATCH_SYNC_DAILY_POLICY__BATCH_SYNC_DAILY_POLICY_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BATCH_SYNC_DAILY_POLICY__BATCH_SYNC_DAILY_POLICY_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBatch_sync_daily_policyAccess().getBatch_sync_daily_policy_timeTIMETerminalRuleCall_2_0(), semanticObject.getBatch_sync_daily_policy_time());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     batch_sync_policy_definition returns batch_sync_daily_policy
	 *
	 * Constraint:
	 *     (batch_sync_daily_policy_time=TIME sync_group_definition=sync_group_definition? filter_on_entity_setting=filter_on_entity_setting?)
	 */
	protected void sequence_batch_sync_daily_policy_batch_sync_policy_definition(ISerializationContext context, batch_sync_daily_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns batch_sync_daily_policy
	 *
	 * Constraint:
	 *     (
	 *         batch_sync_daily_policy_time=TIME 
	 *         (
	 *             (sync_group_definition=sync_group_definition? filter_on_entity_setting=filter_on_entity_setting?) | 
	 *             (
	 *                 guard_condition_definition=guard_condition_definition 
	 *                 ownership_query_definition=ownership_query_definition 
	 *                 exclude_details_setting=exclude_details_setting? 
	 *                 sync_group_definition=sync_group_definition? 
	 *                 filter_on_entity_setting=filter_on_entity_setting?
	 *             ) | 
	 *             (
	 *                 (user_filter_reference=user_filter_reference language_dependent_definition=language_dependent_definition?)? 
	 *                 sync_group_definition=sync_group_definition?
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_batch_sync_daily_policy_batch_sync_policy_definition_grouped_push_sync_policy_definition_push_sync_policy_definition(ISerializationContext context, batch_sync_daily_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     grouped_push_sync_policy_definition returns batch_sync_daily_policy
	 *
	 * Constraint:
	 *     (
	 *         batch_sync_daily_policy_time=TIME 
	 *         (user_filter_reference=user_filter_reference language_dependent_definition=language_dependent_definition?)? 
	 *         sync_group_definition=sync_group_definition?
	 *     )
	 */
	protected void sequence_batch_sync_daily_policy_grouped_push_sync_policy_definition(ISerializationContext context, batch_sync_daily_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     push_sync_policy_definition returns batch_sync_daily_policy
	 *
	 * Constraint:
	 *     (
	 *         batch_sync_daily_policy_time=TIME 
	 *         guard_condition_definition=guard_condition_definition 
	 *         ownership_query_definition=ownership_query_definition 
	 *         exclude_details_setting=exclude_details_setting? 
	 *         sync_group_definition=sync_group_definition? 
	 *         filter_on_entity_setting=filter_on_entity_setting?
	 *     )
	 */
	protected void sequence_batch_sync_daily_policy_push_sync_policy_definition(ISerializationContext context, batch_sync_daily_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_schedule_definition returns batch_sync_hourly_policy
	 *     batch_sync_hourly_policy returns batch_sync_hourly_policy
	 *
	 * Constraint:
	 *     batch_sync_hourly_policy_time=TIME
	 */
	protected void sequence_batch_sync_hourly_policy(ISerializationContext context, batch_sync_hourly_policy semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BATCH_SYNC_HOURLY_POLICY__BATCH_SYNC_HOURLY_POLICY_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BATCH_SYNC_HOURLY_POLICY__BATCH_SYNC_HOURLY_POLICY_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBatch_sync_hourly_policyAccess().getBatch_sync_hourly_policy_timeTIMETerminalRuleCall_1_0(), semanticObject.getBatch_sync_hourly_policy_time());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     batch_sync_policy_definition returns batch_sync_hourly_policy
	 *
	 * Constraint:
	 *     (batch_sync_hourly_policy_time=TIME sync_group_definition=sync_group_definition? filter_on_entity_setting=filter_on_entity_setting?)
	 */
	protected void sequence_batch_sync_hourly_policy_batch_sync_policy_definition(ISerializationContext context, batch_sync_hourly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns batch_sync_hourly_policy
	 *
	 * Constraint:
	 *     (
	 *         batch_sync_hourly_policy_time=TIME 
	 *         (
	 *             (sync_group_definition=sync_group_definition? filter_on_entity_setting=filter_on_entity_setting?) | 
	 *             (
	 *                 guard_condition_definition=guard_condition_definition 
	 *                 ownership_query_definition=ownership_query_definition 
	 *                 exclude_details_setting=exclude_details_setting? 
	 *                 sync_group_definition=sync_group_definition? 
	 *                 filter_on_entity_setting=filter_on_entity_setting?
	 *             ) | 
	 *             (
	 *                 (user_filter_reference=user_filter_reference language_dependent_definition=language_dependent_definition?)? 
	 *                 sync_group_definition=sync_group_definition?
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_batch_sync_hourly_policy_batch_sync_policy_definition_grouped_push_sync_policy_definition_push_sync_policy_definition(ISerializationContext context, batch_sync_hourly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     grouped_push_sync_policy_definition returns batch_sync_hourly_policy
	 *
	 * Constraint:
	 *     (
	 *         batch_sync_hourly_policy_time=TIME 
	 *         (user_filter_reference=user_filter_reference language_dependent_definition=language_dependent_definition?)? 
	 *         sync_group_definition=sync_group_definition?
	 *     )
	 */
	protected void sequence_batch_sync_hourly_policy_grouped_push_sync_policy_definition(ISerializationContext context, batch_sync_hourly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     push_sync_policy_definition returns batch_sync_hourly_policy
	 *
	 * Constraint:
	 *     (
	 *         batch_sync_hourly_policy_time=TIME 
	 *         guard_condition_definition=guard_condition_definition 
	 *         ownership_query_definition=ownership_query_definition 
	 *         exclude_details_setting=exclude_details_setting? 
	 *         sync_group_definition=sync_group_definition? 
	 *         filter_on_entity_setting=filter_on_entity_setting?
	 *     )
	 */
	protected void sequence_batch_sync_hourly_policy_push_sync_policy_definition(ISerializationContext context, batch_sync_hourly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_schedule_definition returns batch_sync_monthly_policy
	 *     batch_sync_monthly_policy returns batch_sync_monthly_policy
	 *
	 * Constraint:
	 *     batch_sync_monthly_policy_time=TIME
	 */
	protected void sequence_batch_sync_monthly_policy(ISerializationContext context, batch_sync_monthly_policy semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BATCH_SYNC_MONTHLY_POLICY__BATCH_SYNC_MONTHLY_POLICY_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BATCH_SYNC_MONTHLY_POLICY__BATCH_SYNC_MONTHLY_POLICY_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBatch_sync_monthly_policyAccess().getBatch_sync_monthly_policy_timeTIMETerminalRuleCall_5_0(), semanticObject.getBatch_sync_monthly_policy_time());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     batch_sync_policy_definition returns batch_sync_monthly_policy
	 *
	 * Constraint:
	 *     (batch_sync_monthly_policy_time=TIME sync_group_definition=sync_group_definition? filter_on_entity_setting=filter_on_entity_setting?)
	 */
	protected void sequence_batch_sync_monthly_policy_batch_sync_policy_definition(ISerializationContext context, batch_sync_monthly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns batch_sync_monthly_policy
	 *
	 * Constraint:
	 *     (
	 *         batch_sync_monthly_policy_time=TIME 
	 *         (
	 *             (sync_group_definition=sync_group_definition? filter_on_entity_setting=filter_on_entity_setting?) | 
	 *             (
	 *                 guard_condition_definition=guard_condition_definition 
	 *                 ownership_query_definition=ownership_query_definition 
	 *                 exclude_details_setting=exclude_details_setting? 
	 *                 sync_group_definition=sync_group_definition? 
	 *                 filter_on_entity_setting=filter_on_entity_setting?
	 *             ) | 
	 *             (
	 *                 (user_filter_reference=user_filter_reference language_dependent_definition=language_dependent_definition?)? 
	 *                 sync_group_definition=sync_group_definition?
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_batch_sync_monthly_policy_batch_sync_policy_definition_grouped_push_sync_policy_definition_push_sync_policy_definition(ISerializationContext context, batch_sync_monthly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     grouped_push_sync_policy_definition returns batch_sync_monthly_policy
	 *
	 * Constraint:
	 *     (
	 *         batch_sync_monthly_policy_time=TIME 
	 *         (user_filter_reference=user_filter_reference language_dependent_definition=language_dependent_definition?)? 
	 *         sync_group_definition=sync_group_definition?
	 *     )
	 */
	protected void sequence_batch_sync_monthly_policy_grouped_push_sync_policy_definition(ISerializationContext context, batch_sync_monthly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     push_sync_policy_definition returns batch_sync_monthly_policy
	 *
	 * Constraint:
	 *     (
	 *         batch_sync_monthly_policy_time=TIME 
	 *         guard_condition_definition=guard_condition_definition 
	 *         ownership_query_definition=ownership_query_definition 
	 *         exclude_details_setting=exclude_details_setting? 
	 *         sync_group_definition=sync_group_definition? 
	 *         filter_on_entity_setting=filter_on_entity_setting?
	 *     )
	 */
	protected void sequence_batch_sync_monthly_policy_push_sync_policy_definition(ISerializationContext context, batch_sync_monthly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns batch_sync_policy_definition
	 *     batch_sync_policy_definition returns batch_sync_policy_definition
	 *
	 * Constraint:
	 *     (
	 *         (sync_group_definition=sync_group_definition filter_on_entity_setting=filter_on_entity_setting) | 
	 *         filter_on_entity_setting=filter_on_entity_setting
	 *     )?
	 */
	protected void sequence_batch_sync_policy_definition(ISerializationContext context, batch_sync_policy_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     batch_sync_policy_definition returns batch_sync_weekly_policy
	 *
	 * Constraint:
	 *     (
	 *         (batch_sync_weekday=batch_sync_weekday | (batch_sync_weekday=batch_sync_weekday batch_sync_weekday=batch_sync_weekday+)) 
	 *         sync_group_definition=sync_group_definition? 
	 *         batch_sync_weekly_policy_time=TIME 
	 *         sync_group_definition=sync_group_definition? 
	 *         filter_on_entity_setting=filter_on_entity_setting?
	 *     )
	 */
	protected void sequence_batch_sync_policy_definition_batch_sync_weekly_policy(ISerializationContext context, batch_sync_weekly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns batch_sync_weekly_policy
	 *
	 * Constraint:
	 *     (
	 *         (batch_sync_weekday=batch_sync_weekday | (batch_sync_weekday=batch_sync_weekday batch_sync_weekday=batch_sync_weekday+)) 
	 *         sync_group_definition=sync_group_definition? 
	 *         batch_sync_weekly_policy_time=TIME 
	 *         (
	 *             (sync_group_definition=sync_group_definition? filter_on_entity_setting=filter_on_entity_setting?) | 
	 *             (
	 *                 guard_condition_definition=guard_condition_definition 
	 *                 ownership_query_definition=ownership_query_definition 
	 *                 exclude_details_setting=exclude_details_setting? 
	 *                 sync_group_definition=sync_group_definition? 
	 *                 filter_on_entity_setting=filter_on_entity_setting?
	 *             ) | 
	 *             (
	 *                 (user_filter_reference=user_filter_reference language_dependent_definition=language_dependent_definition?)? 
	 *                 sync_group_definition=sync_group_definition?
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_batch_sync_policy_definition_batch_sync_weekly_policy_grouped_push_sync_policy_definition_push_sync_policy_definition(ISerializationContext context, batch_sync_weekly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns sync_schedule_definition
	 *
	 * Constraint:
	 *     (
	 *         string=STRING 
	 *         (
	 *             (sync_group_definition=sync_group_definition? filter_on_entity_setting=filter_on_entity_setting?) | 
	 *             (
	 *                 guard_condition_definition=guard_condition_definition 
	 *                 ownership_query_definition=ownership_query_definition 
	 *                 exclude_details_setting=exclude_details_setting? 
	 *                 sync_group_definition=sync_group_definition? 
	 *                 filter_on_entity_setting=filter_on_entity_setting?
	 *             ) | 
	 *             (
	 *                 (user_filter_reference=user_filter_reference language_dependent_definition=language_dependent_definition?)? 
	 *                 sync_group_definition=sync_group_definition?
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_batch_sync_policy_definition_grouped_push_sync_policy_definition_push_sync_policy_definition_sync_schedule_definition(ISerializationContext context, sync_schedule_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     batch_sync_policy_definition returns sync_schedule_definition
	 *
	 * Constraint:
	 *     (string=STRING sync_group_definition=sync_group_definition? filter_on_entity_setting=filter_on_entity_setting?)
	 */
	protected void sequence_batch_sync_policy_definition_sync_schedule_definition(ISerializationContext context, sync_schedule_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     batch_sync_weekday returns batch_sync_weekday
	 *
	 * Constraint:
	 *     (
	 *         alt='Mon' | 
	 *         alt='Tue' | 
	 *         alt='Wed' | 
	 *         alt='Thu' | 
	 *         alt='Fri' | 
	 *         alt='Sat' | 
	 *         alt='Sun'
	 *     )
	 */
	protected void sequence_batch_sync_weekday(ISerializationContext context, batch_sync_weekday semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_schedule_definition returns batch_sync_weekly_policy
	 *     batch_sync_weekly_policy returns batch_sync_weekly_policy
	 *
	 * Constraint:
	 *     (
	 *         (batch_sync_weekday=batch_sync_weekday | (batch_sync_weekday=batch_sync_weekday batch_sync_weekday=batch_sync_weekday+)) 
	 *         sync_group_definition=sync_group_definition? 
	 *         batch_sync_weekly_policy_time=TIME
	 *     )
	 */
	protected void sequence_batch_sync_weekly_policy(ISerializationContext context, batch_sync_weekly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     grouped_push_sync_policy_definition returns batch_sync_weekly_policy
	 *
	 * Constraint:
	 *     (
	 *         (batch_sync_weekday=batch_sync_weekday | (batch_sync_weekday=batch_sync_weekday batch_sync_weekday=batch_sync_weekday+)) 
	 *         sync_group_definition=sync_group_definition? 
	 *         batch_sync_weekly_policy_time=TIME 
	 *         (user_filter_reference=user_filter_reference language_dependent_definition=language_dependent_definition?)? 
	 *         sync_group_definition=sync_group_definition?
	 *     )
	 */
	protected void sequence_batch_sync_weekly_policy_grouped_push_sync_policy_definition(ISerializationContext context, batch_sync_weekly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     push_sync_policy_definition returns batch_sync_weekly_policy
	 *
	 * Constraint:
	 *     (
	 *         (batch_sync_weekday=batch_sync_weekday | (batch_sync_weekday=batch_sync_weekday batch_sync_weekday=batch_sync_weekday+)) 
	 *         sync_group_definition=sync_group_definition? 
	 *         batch_sync_weekly_policy_time=TIME 
	 *         guard_condition_definition=guard_condition_definition 
	 *         ownership_query_definition=ownership_query_definition 
	 *         exclude_details_setting=exclude_details_setting? 
	 *         sync_group_definition=sync_group_definition? 
	 *         filter_on_entity_setting=filter_on_entity_setting?
	 *     )
	 */
	protected void sequence_batch_sync_weekly_policy_push_sync_policy_definition(ISerializationContext context, batch_sync_weekly_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     cache_invalidation_after returns cache_invalidation_after
	 *
	 * Constraint:
	 *     keyword='after'
	 */
	protected void sequence_cache_invalidation_after(ISerializationContext context, cache_invalidation_after semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CACHE_INVALIDATION_AFTER__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CACHE_INVALIDATION_AFTER__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCache_invalidation_afterAccess().getKeywordAfterKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     cache_invalidation_definition returns cache_invalidation_definition
	 *
	 * Constraint:
	 *     cache_invalidation_after=cache_invalidation_after
	 */
	protected void sequence_cache_invalidation_definition(ISerializationContext context, cache_invalidation_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CACHE_INVALIDATION_DEFINITION__CACHE_INVALIDATION_AFTER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCache_invalidation_definitionAccess().getCache_invalidation_afterCache_invalidation_afterParserRuleCall_2_0_0(), semanticObject.getCache_invalidation_after());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns capability
	 *     capability returns capability
	 *
	 * Constraint:
	 *     (alt='Online' | alt='Offline')
	 */
	protected void sequence_capability(ISerializationContext context, capability semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns category
	 *     category returns category
	 *
	 * Constraint:
	 *     (alt='Integration' | alt='ExternalB2B' | alt='Users')
	 */
	protected void sequence_category(ISerializationContext context, category semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     change_detection_definition returns change_detection_definition
	 *
	 * Constraint:
	 *     trigger=trigger+
	 */
	protected void sequence_change_detection_definition(ISerializationContext context, change_detection_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns client_cache_sync_policy_definition
	 *     client_cache_sync_policy_definition returns client_cache_sync_policy_definition
	 *
	 * Constraint:
	 *     cache_invalidation_definition=cache_invalidation_definition
	 */
	protected void sequence_client_cache_sync_policy_definition(ISerializationContext context, client_cache_sync_policy_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CLIENT_CACHE_SYNC_POLICY_DEFINITION__CACHE_INVALIDATION_DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CLIENT_CACHE_SYNC_POLICY_DEFINITION__CACHE_INVALIDATION_DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClient_cache_sync_policy_definitionAccess().getCache_invalidation_definitionCache_invalidation_definitionParserRuleCall_2_0(), semanticObject.getCache_invalidation_definition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     combine_attribute returns combine_attribute
	 *
	 * Constraint:
	 *     trigger_attribute=trigger_attribute+
	 */
	protected void sequence_combine_attribute(ISerializationContext context, combine_attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns complextype_definition
	 *     complextype_definition returns complextype_definition
	 *
	 * Constraint:
	 *     (complextype_definition_complextype_name=ID (alt=dataitem_definition | alt=array_definition | alt=aggregate_definition)+)
	 */
	protected void sequence_complextype_definition(ISerializationContext context, complextype_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     compute_definition returns compute_definition
	 *
	 * Constraint:
	 *     compute_expression=compute_expression
	 */
	protected void sequence_compute_definition(ISerializationContext context, compute_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COMPUTE_DEFINITION__COMPUTE_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COMPUTE_DEFINITION__COMPUTE_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompute_definitionAccess().getCompute_expressionCompute_expressionParserRuleCall_2_0(), semanticObject.getCompute_expression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     compute_expression_atom returns compute_expression_atom
	 *
	 * Constraint:
	 *     (
	 *         (compute_expression_atom_datasource_ref=ID projection_flag_condition=projection_flag_condition?) | 
	 *         (compute_expression_atom_datasource_ref=ID compute_expression_atom_dataitem_ref=ID projection_flag_condition=projection_flag_condition?) | 
	 *         (compute_expression_atom_datasource_ref=ID? compute_expression_atom_dataitem_ref=ID compute_expression_atom_value=compute_expression_atom_value) | 
	 *         (compute_expression_atom_datasource_ref=ID? compute_expression_atom_dataitem_ref=ID) | 
	 *         compute_expression_atom_value=compute_expression_atom_value
	 *     )
	 */
	protected void sequence_compute_expression_atom(ISerializationContext context, compute_expression_atom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     compute_expression_atom_value returns compute_expression_atom_value
	 *
	 * Constraint:
	 *     alt=STRING?
	 */
	protected void sequence_compute_expression_atom_value(ISerializationContext context, compute_expression_atom_value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     compute_expression returns compute_expression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             compute_expression_atom=compute_expression_atom | 
	 *             compute_expression=compute_expression | 
	 *             (compute_expression=compute_expression compute_expression_atom=compute_expression_atom compute_expression_atom=compute_expression_atom) | 
	 *             (compute_expression=compute_expression compute_expression_atom=compute_expression_atom) | 
	 *             compute_expression=compute_expression
	 *         ) 
	 *         compute_expression=compute_expression?
	 *     )
	 */
	protected void sequence_compute_expression(ISerializationContext context, compute_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     computeditem_definition returns computeditem_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         computeditem_definition_dataitem_name=ID 
	 *         type_definition=type_definition 
	 *         (alt=label_definition | alt=compute_definition)+
	 *     )
	 */
	protected void sequence_computeditem_definition(ISerializationContext context, computeditem_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     copy_definition returns copy_definition
	 *
	 * Constraint:
	 *     (dataitem_reference=dataitem_reference copy_definition_copy_name=ID)
	 */
	protected void sequence_copy_definition(ISerializationContext context, copy_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COPY_DEFINITION__DATAITEM_REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COPY_DEFINITION__DATAITEM_REFERENCE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COPY_DEFINITION__COPY_DEFINITION_COPY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COPY_DEFINITION__COPY_DEFINITION_COPY_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCopy_definitionAccess().getDataitem_referenceDataitem_referenceParserRuleCall_1_0(), semanticObject.getDataitem_reference());
		feeder.accept(grammarAccess.getCopy_definitionAccess().getCopy_definition_copy_nameIDTerminalRuleCall_3_0(), semanticObject.getCopy_definition_copy_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     crud_definition returns crud_definition
	 *
	 * Constraint:
	 *     (crud_reference=crud_reference crud_reference=crud_reference*)
	 */
	protected void sequence_crud_definition(ISerializationContext context, crud_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     crud_reference returns crud_reference
	 *
	 * Constraint:
	 *     (alt='Create' | alt='Read' | alt='Update' | alt='Delete' | alt='StateChange')
	 */
	protected void sequence_crud_reference(ISerializationContext context, crud_reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     dataitem_definition returns dataitem_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         dataitem_definition_dataitem_name=ID 
	 *         type_definition=type_definition 
	 *         (
	 *             alt=label_definition | 
	 *             alt=fetch_definition | 
	 *             alt=enum_lookup_list_flag_setting | 
	 *             alt=default_data_definition | 
	 *             alt=exec_definition | 
	 *             alt=regexp_definition | 
	 *             alt=maxlength_definition | 
	 *             alt=format_definition | 
	 *             alt=mandatory_flag_setting | 
	 *             alt=inline_property_setting | 
	 *             alt=lov_flag_setting | 
	 *             alt=updatable_flag_setting | 
	 *             alt=server_updatable_flag_setting | 
	 *             alt=server_insertable_flag_setting | 
	 *             alt=validation_definition | 
	 *             alt=implementation_definition | 
	 *             alt=implementation_type_definition | 
	 *             alt=stream_file_info_definition
	 *         )*
	 *     )
	 */
	protected void sequence_dataitem_definition(ISerializationContext context, dataitem_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     dataitem_reference returns dataitem_reference
	 *
	 * Constraint:
	 *     dataitem_reference_item_name=ID
	 */
	protected void sequence_dataitem_reference(ISerializationContext context, dataitem_reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATAITEM_REFERENCE__DATAITEM_REFERENCE_ITEM_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATAITEM_REFERENCE__DATAITEM_REFERENCE_ITEM_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataitem_referenceAccess().getDataitem_reference_item_nameIDTerminalRuleCall_0(), semanticObject.getDataitem_reference_item_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns datasource_definition
	 *     datasource_definition returns datasource_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         datasource_definition_datasource_name=ID 
	 *         datasource_definition_reference_object_name=ID? 
	 *         datasource_definition_extends_name=ID? 
	 *         (
	 *             alt=warnings_enabled_flag | 
	 *             alt=key_fetch_on_create_flag | 
	 *             alt=keys_definition | 
	 *             alt=luname_definition | 
	 *             alt=keyref_definition | 
	 *             alt=dependencies_definition | 
	 *             alt=exec_definition | 
	 *             alt=from_definition | 
	 *             alt=validate_action_reference | 
	 *             alt=where_definition | 
	 *             alt=statemachine_definition | 
	 *             alt=use_attributes_definition | 
	 *             alt=exclude_attributes_definition | 
	 *             alt=dataitem_definition | 
	 *             alt=computeditem_definition | 
	 *             alt=tag_definition | 
	 *             alt=function_definition | 
	 *             alt=action_definition | 
	 *             alt=crud_definition | 
	 *             alt=array_definition | 
	 *             alt=aggregate_definition | 
	 *             alt=transaction_group_definition | 
	 *             alt=sync_policy_definition | 
	 *             alt=change_detection_definition | 
	 *             alt=exclude_from_config_flag_setting
	 *         )*
	 *     )
	 */
	protected void sequence_datasource_definition(ISerializationContext context, datasource_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     default_data_definition returns default_data_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_default_data_definition(ISerializationContext context, default_data_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DEFAULT_DATA_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DEFAULT_DATA_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefault_data_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     dependencies_definition returns dependencies_definition
	 *
	 * Constraint:
	 *     (dependency_reference=ID dependency_reference2=ID*)
	 */
	protected void sequence_dependencies_definition(ISerializationContext context, dependencies_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     dependency_definition returns dependency_definition
	 *
	 * Constraint:
	 *     server_package_reference=server_package_reference+
	 */
	protected void sequence_dependency_definition(ISerializationContext context, dependency_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     description returns description
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_description(ISerializationContext context, description semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DESCRIPTION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DESCRIPTION__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     dynamic_component_dependency returns dynamic_component_dependency
	 *
	 * Constraint:
	 *     ComponentName=ID
	 */
	protected void sequence_dynamic_component_dependency(ISerializationContext context, dynamic_component_dependency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DYNAMIC_COMPONENT_DEPENDENCY__COMPONENT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DYNAMIC_COMPONENT_DEPENDENCY__COMPONENT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDynamic_component_dependencyAccess().getComponentNameIDTerminalRuleCall_1_0(), semanticObject.getComponentName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns entity_set_definition
	 *     entity_set_definition returns entity_set_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         EntitySetName=identifier 
	 *         ReferenceObjectName=ID 
	 *         (alt=where_definition | alt=offline_filter_definition | alt=filtering_context_list_definition)*
	 *     )
	 */
	protected void sequence_entity_set_definition(ISerializationContext context, entity_set_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     enum_lookup_list_flag_setting returns enum_lookup_list_flag_setting
	 *
	 * Constraint:
	 *     projection_flag_condition=projection_flag_condition
	 */
	protected void sequence_enum_lookup_list_flag_setting(ISerializationContext context, enum_lookup_list_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ENUM_LOOKUP_LIST_FLAG_SETTING__PROJECTION_FLAG_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ENUM_LOOKUP_LIST_FLAG_SETTING__PROJECTION_FLAG_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnum_lookup_list_flag_settingAccess().getProjection_flag_conditionProjection_flag_conditionParserRuleCall_3_0(), semanticObject.getProjection_flag_condition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns enumeration_definition
	 *     enumeration_definition returns enumeration_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         enumeration_type_definition=enumeration_type_definition? 
	 *         exec_definition=exec_definition? 
	 *         enumeration_value_definition=enumeration_value_definition*
	 *     )
	 */
	protected void sequence_enumeration_definition(ISerializationContext context, enumeration_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     enumeration_type_definition returns enumeration_type_definition_enumeration_type
	 *     enumeration_type_definition_enumeration_type returns enumeration_type_definition_enumeration_type
	 *
	 * Constraint:
	 *     (alt='Standard' | alt='EntityState' | alt='Custom' | alt='Lookup')
	 */
	protected void sequence_enumeration_type_definition_enumeration_type(ISerializationContext context, enumeration_type_definition_enumeration_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     enumeration_value_definition returns enumeration_value_definition
	 *
	 * Constraint:
	 *     (dynamic_component_dependency=dynamic_component_dependency* string=STRING (string=STRING? label_definition=label_definition)?)
	 */
	protected void sequence_enumeration_value_definition(ISerializationContext context, enumeration_value_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     exclude_attributes_definition returns exclude_attributes_definition
	 *
	 * Constraint:
	 *     (attribute_reference=ID attribute_reference2=ID*)
	 */
	protected void sequence_exclude_attributes_definition(ISerializationContext context, exclude_attributes_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     exclude_details_setting returns exclude_details_setting
	 *
	 * Constraint:
	 *     (exclude_details_entity=ID exclude_details_entity2=ID*)
	 */
	protected void sequence_exclude_details_setting(ISerializationContext context, exclude_details_setting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     exclude_from_config_flag_setting returns exclude_from_config_flag_setting
	 *
	 * Constraint:
	 *     keyword='excludefromconfig'
	 */
	protected void sequence_exclude_from_config_flag_setting(ISerializationContext context, exclude_from_config_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXCLUDE_FROM_CONFIG_FLAG_SETTING__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXCLUDE_FROM_CONFIG_FLAG_SETTING__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExclude_from_config_flag_settingAccess().getKeywordExcludefromconfigKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     exec_definition returns exec_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_exec_definition(ISerializationContext context, exec_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXEC_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXEC_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExec_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     fetch_definition returns fetch_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_fetch_definition(ISerializationContext context, fetch_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FETCH_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FETCH_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFetch_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     filter_column_definition returns filter_column_definition
	 *
	 * Constraint:
	 *     (filter_column_definition_filter_column_name=ID (filter_column_operator=filter_column_operator? null_image=null_image)+)
	 */
	protected void sequence_filter_column_definition(ISerializationContext context, filter_column_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     filter_column_operator returns filter_column_operator
	 *
	 * Constraint:
	 *     filter_column_operator_filter_column_operator_name=filter_column_operator_filter_column_operator_name
	 */
	protected void sequence_filter_column_operator(ISerializationContext context, filter_column_operator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FILTER_COLUMN_OPERATOR__FILTER_COLUMN_OPERATOR_FILTER_COLUMN_OPERATOR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FILTER_COLUMN_OPERATOR__FILTER_COLUMN_OPERATOR_FILTER_COLUMN_OPERATOR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFilter_column_operatorAccess().getFilter_column_operator_filter_column_operator_nameFilter_column_operator_filter_column_operator_nameParserRuleCall_1_0(), semanticObject.getFilter_column_operator_filter_column_operator_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     filter_column_operator_filter_column_operator_name returns filter_column_operator_filter_column_operator_name
	 *
	 * Constraint:
	 *     (
	 *         alt='Like' | 
	 *         alt='Equal' | 
	 *         alt='Lower' | 
	 *         alt='LowerOrEqual' | 
	 *         alt='Greater' | 
	 *         alt='GreaterOrEqual'
	 *     )
	 */
	protected void sequence_filter_column_operator_filter_column_operator_name(ISerializationContext context, filter_column_operator_filter_column_operator_name semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     filter_columns_definition returns filter_columns_definition
	 *
	 * Constraint:
	 *     filter_column_definition=filter_column_definition+
	 */
	protected void sequence_filter_columns_definition(ISerializationContext context, filter_columns_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     filter_on_entity_setting returns filter_on_entity_setting
	 *
	 * Constraint:
	 *     filter_on_entity_setting_reference_object_name=ID
	 */
	protected void sequence_filter_on_entity_setting(ISerializationContext context, filter_on_entity_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FILTER_ON_ENTITY_SETTING__FILTER_ON_ENTITY_SETTING_REFERENCE_OBJECT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FILTER_ON_ENTITY_SETTING__FILTER_ON_ENTITY_SETTING_REFERENCE_OBJECT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFilter_on_entity_settingAccess().getFilter_on_entity_setting_reference_object_nameIDTerminalRuleCall_2_0(), semanticObject.getFilter_on_entity_setting_reference_object_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     filtering_context_list_definition returns filtering_context_list_definition
	 *
	 * Constraint:
	 *     (ContextName=ID AttributeName=ID (ContextName2=ID AttributeName2=ID)*)
	 */
	protected void sequence_filtering_context_list_definition(ISerializationContext context, filtering_context_list_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     filtering_context_definition returns filtering_context_property
	 *     filtering_context_property returns filtering_context_property
	 *
	 * Constraint:
	 *     (filtering_context_property_context_name=ID filtering_context_property_attribute_name=ID)
	 */
	protected void sequence_filtering_context_property(ISerializationContext context, filtering_context_property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FILTERING_CONTEXT_PROPERTY__FILTERING_CONTEXT_PROPERTY_CONTEXT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FILTERING_CONTEXT_PROPERTY__FILTERING_CONTEXT_PROPERTY_CONTEXT_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FILTERING_CONTEXT_PROPERTY__FILTERING_CONTEXT_PROPERTY_ATTRIBUTE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FILTERING_CONTEXT_PROPERTY__FILTERING_CONTEXT_PROPERTY_ATTRIBUTE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFiltering_context_propertyAccess().getFiltering_context_property_context_nameIDTerminalRuleCall_0_0(), semanticObject.getFiltering_context_property_context_name());
		feeder.accept(grammarAccess.getFiltering_context_propertyAccess().getFiltering_context_property_attribute_nameIDTerminalRuleCall_2_0(), semanticObject.getFiltering_context_property_attribute_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     format_definition returns format_definition
	 *
	 * Constraint:
	 *     (
	 *         alt='uppercase' | 
	 *         alt='lowercase' | 
	 *         alt='percentage' | 
	 *         alt='ifscurrency' | 
	 *         alt='decimal' | 
	 *         alt='longtime'
	 *     )
	 */
	protected void sequence_format_definition(ISerializationContext context, format_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     from_definition returns from_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_from_definition(ISerializationContext context, from_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FROM_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FROM_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFrom_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns function_definition
	 *     function_definition returns function_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         function_definition_function_name=ID 
	 *         type_definition=type_definition 
	 *         implementation_definition=implementation_definition? 
	 *         dependency_definition=dependency_definition? 
	 *         (
	 *             alt=label_definition | 
	 *             alt=based_on_entity_set_definition | 
	 *             alt=support_file_info_flag | 
	 *             alt=dependencies_definition | 
	 *             alt=mandatory_flag_setting | 
	 *             alt=parameter_definition | 
	 *             alt=where_definition | 
	 *             alt=from_definition | 
	 *             alt=available_flag_setting | 
	 *             alt=offline_sync_policy_definition | 
	 *             alt=transaction_group_definition | 
	 *             alt=alter_attribute_definition
	 *         )*
	 *     )
	 */
	protected void sequence_function_definition(ISerializationContext context, function_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns grouped_push_sync_policy_definition
	 *     grouped_push_sync_policy_definition returns grouped_push_sync_policy_definition
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             user_filter_reference=user_filter_reference 
	 *             language_dependent_definition=language_dependent_definition? 
	 *             sync_group_definition=sync_group_definition
	 *         ) | 
	 *         sync_group_definition=sync_group_definition
	 *     )?
	 */
	protected void sequence_grouped_push_sync_policy_definition(ISerializationContext context, grouped_push_sync_policy_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     grouped_push_sync_policy_definition returns sync_schedule_definition
	 *
	 * Constraint:
	 *     (
	 *         string=STRING 
	 *         (user_filter_reference=user_filter_reference language_dependent_definition=language_dependent_definition?)? 
	 *         sync_group_definition=sync_group_definition?
	 *     )
	 */
	protected void sequence_grouped_push_sync_policy_definition_sync_schedule_definition(ISerializationContext context, sync_schedule_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     guard_condition_definition returns guard_condition_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_guard_condition_definition(ISerializationContext context, guard_condition_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GUARD_CONDITION_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GUARD_CONDITION_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuard_condition_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     guard_function returns guard_function
	 *
	 * Constraint:
	 *     (guard_function_guard_function_name=ID guard_function_argument=ID* guard_function_argument=ID)
	 */
	protected void sequence_guard_function(ISerializationContext context, guard_function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     identifier returns identifier
	 *
	 * Constraint:
	 *     (
	 *         Name=ID | 
	 *         Name='All' | 
	 *         Name='Alpha' | 
	 *         Name='Batch' | 
	 *         Name='Binary' | 
	 *         Name='Boolean' | 
	 *         Name='ClientCache' | 
	 *         Name='Create' | 
	 *         Name='Custom' | 
	 *         Name='Date' | 
	 *         Name='Delete' | 
	 *         Name='ETag' | 
	 *         Name='Entity' | 
	 *         Name='EntityState' | 
	 *         Name='Enumeration' | 
	 *         Name='Equal' | 
	 *         Name='ExternalB2B' | 
	 *         Name='False' | 
	 *         Name='Fri' | 
	 *         Name='GUID' | 
	 *         Name='Greater' | 
	 *         Name='GreaterOrEqual' | 
	 *         Name='GroupedPush' | 
	 *         Name='Identity' | 
	 *         Name='Incoming' | 
	 *         Name='Integer' | 
	 *         Name='Integration' | 
	 *         Name='Like' | 
	 *         Name='List' | 
	 *         Name='LongText' | 
	 *         Name='Lookup' | 
	 *         Name='Lower' | 
	 *         Name='LowerOrEqual' | 
	 *         Name='Mobility' | 
	 *         Name='Mon' | 
	 *         Name='None' | 
	 *         Name='Null' | 
	 *         Name='Number' | 
	 *         Name='Offline' | 
	 *         Name='Online' | 
	 *         Name='OnlineOnly' | 
	 *         Name='Push' | 
	 *         Name='Read' | 
	 *         Name='Reporting' | 
	 *         Name='Sat' | 
	 *         Name='Standard' | 
	 *         Name='StateChange' | 
	 *         Name='Stream' | 
	 *         Name='Structure' | 
	 *         Name='Sun' | 
	 *         Name='Text' | 
	 *         Name='Thu' | 
	 *         Name='Time' | 
	 *         Name='Timestamp' | 
	 *         Name='True' | 
	 *         Name='Tue' | 
	 *         Name='Update' | 
	 *         Name='Users' | 
	 *         Name='Wed'
	 *     )
	 */
	protected void sequence_identifier(ISerializationContext context, identifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     implementation_definition returns implementation_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_implementation_definition(ISerializationContext context, implementation_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.IMPLEMENTATION_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.IMPLEMENTATION_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImplementation_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     implementation_type_definition returns implementation_type_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_implementation_type_definition(ISerializationContext context, implementation_type_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.IMPLEMENTATION_TYPE_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.IMPLEMENTATION_TYPE_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImplementation_type_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns include_fragment
	 *     include_fragment returns include_fragment
	 *
	 * Constraint:
	 *     (dynamic_component_dependency=dynamic_component_dependency* FragmentToIncludeName=ID)
	 */
	protected void sequence_include_fragment(ISerializationContext context, include_fragment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns incoming_sync_policy_definition
	 *     incoming_sync_policy_definition returns incoming_sync_policy_definition
	 *
	 * Constraint:
	 *     keyword='Incoming'
	 */
	protected void sequence_incoming_sync_policy_definition(ISerializationContext context, incoming_sync_policy_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INCOMING_SYNC_POLICY_DEFINITION__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INCOMING_SYNC_POLICY_DEFINITION__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIncoming_sync_policy_definitionAccess().getKeywordIncomingKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     inline_property_setting returns inline_property_setting
	 *
	 * Constraint:
	 *     projection_flag_condition=projection_flag_condition
	 */
	protected void sequence_inline_property_setting(ISerializationContext context, inline_property_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INLINE_PROPERTY_SETTING__PROJECTION_FLAG_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INLINE_PROPERTY_SETTING__PROJECTION_FLAG_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInline_property_settingAccess().getProjection_flag_conditionProjection_flag_conditionParserRuleCall_3_0(), semanticObject.getProjection_flag_condition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     key_fetch_on_create_flag returns key_fetch_on_create_flag
	 *
	 * Constraint:
	 *     projection_flag_condition=projection_flag_condition
	 */
	protected void sequence_key_fetch_on_create_flag(ISerializationContext context, key_fetch_on_create_flag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.KEY_FETCH_ON_CREATE_FLAG__PROJECTION_FLAG_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.KEY_FETCH_ON_CREATE_FLAG__PROJECTION_FLAG_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKey_fetch_on_create_flagAccess().getProjection_flag_conditionProjection_flag_conditionParserRuleCall_3_0(), semanticObject.getProjection_flag_condition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     key_reference returns key_reference
	 *
	 * Constraint:
	 *     key_reference_key_name=ID
	 */
	protected void sequence_key_reference(ISerializationContext context, key_reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.KEY_REFERENCE__KEY_REFERENCE_KEY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.KEY_REFERENCE__KEY_REFERENCE_KEY_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKey_referenceAccess().getKey_reference_key_nameIDTerminalRuleCall_0(), semanticObject.getKey_reference_key_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     keyref_definition returns keyref_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_keyref_definition(ISerializationContext context, keyref_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.KEYREF_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.KEYREF_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyref_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     keys_definition returns keys_definition
	 *
	 * Constraint:
	 *     (key_reference=key_reference key_reference=key_reference* where_definition=where_definition?)
	 */
	protected void sequence_keys_definition(ISerializationContext context, keys_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     label_definition returns label_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_label_definition(ISerializationContext context, label_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LABEL_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LABEL_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabel_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     language_dependent_definition returns language_dependent_definition_language_dependent_type
	 *     language_dependent_definition_language_dependent_type returns language_dependent_definition_language_dependent_type
	 *
	 * Constraint:
	 *     (alt='True' | alt='False')
	 */
	protected void sequence_language_dependent_definition_language_dependent_type(ISerializationContext context, language_dependent_definition_language_dependent_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     layer_specification returns layer_specification
	 *
	 * Constraint:
	 *     LayerName=ID
	 */
	protected void sequence_layer_specification(ISerializationContext context, layer_specification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LAYER_SPECIFICATION__LAYER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LAYER_SPECIFICATION__LAYER_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLayer_specificationAccess().getLayerNameIDTerminalRuleCall_1_0(), semanticObject.getLayerName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     lov_flag_setting returns lov_flag_setting
	 *
	 * Constraint:
	 *     keyword='lovcolumn'
	 */
	protected void sequence_lov_flag_setting(ISerializationContext context, lov_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LOV_FLAG_SETTING__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LOV_FLAG_SETTING__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLov_flag_settingAccess().getKeywordLovcolumnKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     lu_definition returns lu_definition
	 *
	 * Constraint:
	 *     lu_definition_lu_name=ID
	 */
	protected void sequence_lu_definition(ISerializationContext context, lu_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LU_DEFINITION__LU_DEFINITION_LU_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LU_DEFINITION__LU_DEFINITION_LU_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLu_definitionAccess().getLu_definition_lu_nameIDTerminalRuleCall_2_0(), semanticObject.getLu_definition_lu_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     luname_definition returns luname_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_luname_definition(ISerializationContext context, luname_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LUNAME_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LUNAME_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLuname_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     mandatory_flag_setting returns mandatory_flag_setting
	 *
	 * Constraint:
	 *     projection_flag_condition=projection_flag_condition
	 */
	protected void sequence_mandatory_flag_setting(ISerializationContext context, mandatory_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MANDATORY_FLAG_SETTING__PROJECTION_FLAG_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MANDATORY_FLAG_SETTING__PROJECTION_FLAG_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMandatory_flag_settingAccess().getProjection_flag_conditionProjection_flag_conditionParserRuleCall_3_0(), semanticObject.getProjection_flag_condition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     mapping_arguments returns mapping_arguments
	 *
	 * Constraint:
	 *     (mapping_argument=ID* mapping_argument=ID)
	 */
	protected void sequence_mapping_arguments(ISerializationContext context, mapping_arguments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     maxlength_definition returns maxlength_definition
	 *
	 * Constraint:
	 *     keyword='maxlength'
	 */
	protected void sequence_maxlength_definition(ISerializationContext context, maxlength_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MAXLENGTH_DEFINITION__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MAXLENGTH_DEFINITION__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxlength_definitionAccess().getKeywordMaxlengthKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     null_image returns null_image
	 *
	 * Constraint:
	 *     (null_image_null_image_id=STRING null_image_null_match=null_image_null_match)
	 */
	protected void sequence_null_image(ISerializationContext context, null_image semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NULL_IMAGE__NULL_IMAGE_NULL_IMAGE_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NULL_IMAGE__NULL_IMAGE_NULL_IMAGE_ID));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NULL_IMAGE__NULL_IMAGE_NULL_MATCH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NULL_IMAGE__NULL_IMAGE_NULL_MATCH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNull_imageAccess().getNull_image_null_image_idSTRINGTerminalRuleCall_1_0(), semanticObject.getNull_image_null_image_id());
		feeder.accept(grammarAccess.getNull_imageAccess().getNull_image_null_matchNull_image_null_matchParserRuleCall_3_0(), semanticObject.getNull_image_null_match());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     null_image_null_match returns null_image_null_match
	 *
	 * Constraint:
	 *     (alt='All' | alt='None' | alt='Null')
	 */
	protected void sequence_null_image_null_match(ISerializationContext context, null_image_null_match semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     objkey_column returns objkey_column
	 *
	 * Constraint:
	 *     objkey_column_objkey_column_name=ID
	 */
	protected void sequence_objkey_column(ISerializationContext context, objkey_column semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OBJKEY_COLUMN__OBJKEY_COLUMN_OBJKEY_COLUMN_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OBJKEY_COLUMN__OBJKEY_COLUMN_OBJKEY_COLUMN_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjkey_columnAccess().getObjkey_column_objkey_column_nameIDTerminalRuleCall_1_0(), semanticObject.getObjkey_column_objkey_column_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     objkey_mapping returns objkey_mapping
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_objkey_mapping(ISerializationContext context, objkey_mapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OBJKEY_MAPPING__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OBJKEY_MAPPING__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjkey_mappingAccess().getStringSTRINGTerminalRuleCall_1_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     offline_filter_definition returns offline_filter_definition
	 *
	 * Constraint:
	 *     keyword='offlinefilter'
	 */
	protected void sequence_offline_filter_definition(ISerializationContext context, offline_filter_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OFFLINE_FILTER_DEFINITION__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OFFLINE_FILTER_DEFINITION__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOffline_filter_definitionAccess().getKeywordOfflinefilterKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     offline_sync_policy_definition returns offline_sync_policy_definition
	 *
	 * Constraint:
	 *     keyword='syncpolicy'
	 */
	protected void sequence_offline_sync_policy_definition(ISerializationContext context, offline_sync_policy_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OFFLINE_SYNC_POLICY_DEFINITION__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OFFLINE_SYNC_POLICY_DEFINITION__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOffline_sync_policy_definitionAccess().getKeywordSyncpolicyKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns online_only_sync_policy_definition
	 *     online_only_sync_policy_definition returns online_only_sync_policy_definition
	 *
	 * Constraint:
	 *     keyword='OnlineOnly'
	 */
	protected void sequence_online_only_sync_policy_definition(ISerializationContext context, online_only_sync_policy_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ONLINE_ONLY_SYNC_POLICY_DEFINITION__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ONLINE_ONLY_SYNC_POLICY_DEFINITION__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOnline_only_sync_policy_definitionAccess().getKeywordOnlineOnlyKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns override
	 *     override returns override
	 *
	 * Constraint:
	 *     annotation='@Override'
	 */
	protected void sequence_override(ISerializationContext context, override semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OVERRIDE__ANNOTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OVERRIDE__ANNOTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOverrideAccess().getAnnotationOverrideKeyword_0(), semanticObject.getAnnotation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns overtake
	 *     overtake returns overtake
	 *
	 * Constraint:
	 *     LayerName=ID
	 */
	protected void sequence_overtake(ISerializationContext context, overtake semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OVERTAKE__LAYER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OVERTAKE__LAYER_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOvertakeAccess().getLayerNameIDTerminalRuleCall_1_0(), semanticObject.getLayerName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ownership_query_definition returns ownership_query_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_ownership_query_definition(ISerializationContext context, ownership_query_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OWNERSHIP_QUERY_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OWNERSHIP_QUERY_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnership_query_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     parameter_definition returns parameter_definition
	 *
	 * Constraint:
	 *     (parameter_definition_parameter_name=ID type_definition=type_definition mandatory_flag_setting=mandatory_flag_setting?)
	 */
	protected void sequence_parameter_definition(ISerializationContext context, parameter_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     prefetch_definition returns prefetch_definition
	 *
	 * Constraint:
	 *     (dataitem_reference=dataitem_reference prefetch_definition_prefetch_name=ID label_definition=label_definition?)
	 */
	protected void sequence_prefetch_definition(ISerializationContext context, prefetch_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     projection_component returns projection_component
	 *
	 * Constraint:
	 *     ComponentName=ID
	 */
	protected void sequence_projection_component(ISerializationContext context, projection_component semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PROJECTION_COMPONENT__COMPONENT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PROJECTION_COMPONENT__COMPONENT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProjection_componentAccess().getComponentNameIDTerminalRuleCall_1_0(), semanticObject.getComponentName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     projection_flag_condition_atom returns projection_flag_condition_atom
	 *
	 * Constraint:
	 *     (
	 *         alt='true' | 
	 *         alt='false' | 
	 *         (
	 *             projection_flag_condition_atom_dataitem_ref=ID 
	 *             (
	 *                 projection_flag_condition_atom_value=projection_flag_condition_atom_value | 
	 *                 projection_flag_condition_atom_value=projection_flag_condition_atom_value | 
	 *                 projection_flag_condition_atom_value=projection_flag_condition_atom_value | 
	 *                 projection_flag_condition_atom_value=projection_flag_condition_atom_value | 
	 *                 projection_flag_condition_atom_value=projection_flag_condition_atom_value | 
	 *                 projection_flag_condition_atom_value=projection_flag_condition_atom_value | 
	 *                 (
	 *                     projection_flag_condition_atom_value=projection_flag_condition_atom_value 
	 *                     projection_flag_condition_atom_value=projection_flag_condition_atom_value*
	 *                 )
	 *             )?
	 *         )
	 *     )
	 */
	protected void sequence_projection_flag_condition_atom(ISerializationContext context, projection_flag_condition_atom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     projection_flag_condition_atom_value returns projection_flag_condition_atom_value
	 *
	 * Constraint:
	 *     alt='null'?
	 */
	protected void sequence_projection_flag_condition_atom_value(ISerializationContext context, projection_flag_condition_atom_value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     projection_flag_condition returns projection_flag_condition
	 *
	 * Constraint:
	 *     (
	 *         (projection_flag_condition_atom=projection_flag_condition_atom | projection_flag_condition=projection_flag_condition) 
	 *         ((alt='and' | alt='or') projection_flag_condition=projection_flag_condition)?
	 *     )
	 */
	protected void sequence_projection_flag_condition(ISerializationContext context, projection_flag_condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     projection_name returns projection_name
	 *
	 * Constraint:
	 *     ModelName=ID
	 */
	protected void sequence_projection_name(ISerializationContext context, projection_name semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PROJECTION_NAME__MODEL_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PROJECTION_NAME__MODEL_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProjection_nameAccess().getModelNameIDTerminalRuleCall_1_0(), semanticObject.getModelName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     sync_policy_definition returns push_sync_policy_definition
	 *     push_sync_policy_definition returns push_sync_policy_definition
	 *
	 * Constraint:
	 *     (
	 *         guard_condition_definition=guard_condition_definition 
	 *         ownership_query_definition=ownership_query_definition 
	 *         exclude_details_setting=exclude_details_setting? 
	 *         sync_group_definition=sync_group_definition? 
	 *         filter_on_entity_setting=filter_on_entity_setting?
	 *     )
	 */
	protected void sequence_push_sync_policy_definition(ISerializationContext context, push_sync_policy_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     push_sync_policy_definition returns sync_schedule_definition
	 *
	 * Constraint:
	 *     (
	 *         string=STRING 
	 *         guard_condition_definition=guard_condition_definition 
	 *         ownership_query_definition=ownership_query_definition 
	 *         exclude_details_setting=exclude_details_setting? 
	 *         sync_group_definition=sync_group_definition? 
	 *         filter_on_entity_setting=filter_on_entity_setting?
	 *     )
	 */
	protected void sequence_push_sync_policy_definition_sync_schedule_definition(ISerializationContext context, sync_schedule_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     query_definition returns query_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         query_definition_query_name=ID 
	 *         (
	 *             alt=lu_definition | 
	 *             alt=keys_definition | 
	 *             alt=luname_definition | 
	 *             alt=keyref_definition | 
	 *             alt=dependencies_definition | 
	 *             alt=from_definition | 
	 *             alt=where_definition | 
	 *             alt=dataitem_definition | 
	 *             alt=computeditem_definition | 
	 *             alt=function_definition | 
	 *             alt=action_definition | 
	 *             alt=array_definition | 
	 *             alt=aggregate_definition | 
	 *             alt=transaction_group_definition | 
	 *             alt=sync_policy_definition | 
	 *             alt=exclude_from_config_flag_setting
	 *         )*
	 *     )
	 */
	protected void sequence_query_definition(ISerializationContext context, query_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     regexp_definition returns regexp_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_regexp_definition(ISerializationContext context, regexp_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REGEXP_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REGEXP_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRegexp_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     server_insertable_flag_setting returns server_insertable_flag_setting
	 *
	 * Constraint:
	 *     keyword='insertable'
	 */
	protected void sequence_server_insertable_flag_setting(ISerializationContext context, server_insertable_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVER_INSERTABLE_FLAG_SETTING__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVER_INSERTABLE_FLAG_SETTING__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServer_insertable_flag_settingAccess().getKeywordInsertableKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     server_package_reference returns server_package_reference
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_server_package_reference(ISerializationContext context, server_package_reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVER_PACKAGE_REFERENCE__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVER_PACKAGE_REFERENCE__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServer_package_referenceAccess().getStringSTRINGTerminalRuleCall_1_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     server_updatable_flag_setting returns server_updatable_flag_setting
	 *
	 * Constraint:
	 *     keyword='updatable'
	 */
	protected void sequence_server_updatable_flag_setting(ISerializationContext context, server_updatable_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVER_UPDATABLE_FLAG_SETTING__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVER_UPDATABLE_FLAG_SETTING__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServer_updatable_flag_settingAccess().getKeywordUpdatableKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns service_group
	 *     service_group returns service_group
	 *
	 * Constraint:
	 *     (alt='Mobility' | alt='Reporting')
	 */
	protected void sequence_service_group(ISerializationContext context, service_group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns singleton_set_definition
	 *     singleton_set_definition returns singleton_set_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         singleton_set_definition_singleton_name=ID 
	 *         (
	 *             (singleton_set_definition_reference_object_name=ID alt=where_definition) | 
	 *             (
	 *                 alt=from_definition | 
	 *                 alt=where_definition | 
	 *                 alt=keys_definition | 
	 *                 alt=dataitem_definition | 
	 *                 alt=computeditem_definition | 
	 *                 alt=action_definition | 
	 *                 alt=function_definition | 
	 *                 alt=array_definition | 
	 *                 alt=aggregate_definition
	 *             )+
	 *         )?
	 *     )
	 */
	protected void sequence_singleton_set_definition(ISerializationContext context, singleton_set_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     state_event_definition returns state_event_definition
	 *
	 * Constraint:
	 *     (
	 *         state_event_definition_event_name=ID 
	 *         (alt=label_definition | alt=parameter_definition | alt=available_flag_setting | alt=offline_sync_policy_definition)*
	 *     )
	 */
	protected void sequence_state_event_definition(ISerializationContext context, state_event_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     statemachine_definition returns statemachine_definition
	 *
	 * Constraint:
	 *     state_event_definition=state_event_definition+
	 */
	protected void sequence_statemachine_definition(ISerializationContext context, statemachine_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     stream_attachment_attribute returns stream_attachment_attribute
	 *
	 * Constraint:
	 *     projection_flag_condition=projection_flag_condition
	 */
	protected void sequence_stream_attachment_attribute(ISerializationContext context, stream_attachment_attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STREAM_ATTACHMENT_ATTRIBUTE__PROJECTION_FLAG_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STREAM_ATTACHMENT_ATTRIBUTE__PROJECTION_FLAG_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStream_attachment_attributeAccess().getProjection_flag_conditionProjection_flag_conditionParserRuleCall_3_0(), semanticObject.getProjection_flag_condition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     stream_file_info_definition returns stream_file_info_definition
	 *
	 * Constraint:
	 *     (
	 *         stream_file_name_attribute=stream_file_name_attribute? 
	 *         stream_mime_type_attribute=stream_mime_type_attribute? 
	 *         stream_attachment_attribute=stream_attachment_attribute?
	 *     )
	 */
	protected void sequence_stream_file_info_definition(ISerializationContext context, stream_file_info_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     stream_file_name_attribute returns stream_file_name_attribute
	 *
	 * Constraint:
	 *     dataitem_reference=dataitem_reference
	 */
	protected void sequence_stream_file_name_attribute(ISerializationContext context, stream_file_name_attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STREAM_FILE_NAME_ATTRIBUTE__DATAITEM_REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STREAM_FILE_NAME_ATTRIBUTE__DATAITEM_REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStream_file_name_attributeAccess().getDataitem_referenceDataitem_referenceParserRuleCall_1_0(), semanticObject.getDataitem_reference());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     stream_mime_type_attribute returns stream_mime_type_attribute
	 *
	 * Constraint:
	 *     dataitem_reference=dataitem_reference
	 */
	protected void sequence_stream_mime_type_attribute(ISerializationContext context, stream_mime_type_attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STREAM_MIME_TYPE_ATTRIBUTE__DATAITEM_REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STREAM_MIME_TYPE_ATTRIBUTE__DATAITEM_REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStream_mime_type_attributeAccess().getDataitem_referenceDataitem_referenceParserRuleCall_1_0(), semanticObject.getDataitem_reference());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns summary_definition
	 *     summary_definition returns summary_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         summary_definition_summary_name=ID 
	 *         (
	 *             alt=keys_definition | 
	 *             alt=luname_definition | 
	 *             alt=keyref_definition | 
	 *             alt=dependencies_definition | 
	 *             alt=from_definition | 
	 *             alt=where_definition | 
	 *             alt=dataitem_definition | 
	 *             alt=computeditem_definition | 
	 *             alt=function_definition | 
	 *             alt=action_definition | 
	 *             alt=array_definition | 
	 *             alt=aggregate_definition
	 *         )*
	 *     )
	 */
	protected void sequence_summary_definition(ISerializationContext context, summary_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     support_file_info_flag returns support_file_info_flag
	 *
	 * Constraint:
	 *     projection_flag_condition=projection_flag_condition
	 */
	protected void sequence_support_file_info_flag(ISerializationContext context, support_file_info_flag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SUPPORT_FILE_INFO_FLAG__PROJECTION_FLAG_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SUPPORT_FILE_INFO_FLAG__PROJECTION_FLAG_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSupport_file_info_flagAccess().getProjection_flag_conditionProjection_flag_conditionParserRuleCall_3_0(), semanticObject.getProjection_flag_condition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     support_warnings_flag_setting returns support_warnings_flag_setting
	 *
	 * Constraint:
	 *     keyword='supportwarnings'
	 */
	protected void sequence_support_warnings_flag_setting(ISerializationContext context, support_warnings_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SUPPORT_WARNINGS_FLAG_SETTING__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SUPPORT_WARNINGS_FLAG_SETTING__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSupport_warnings_flag_settingAccess().getKeywordSupportwarningsKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     sync_group_definition returns sync_group_definition
	 *
	 * Constraint:
	 *     sync_group_definition_value=STRING
	 */
	protected void sequence_sync_group_definition(ISerializationContext context, sync_group_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SYNC_GROUP_DEFINITION__SYNC_GROUP_DEFINITION_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SYNC_GROUP_DEFINITION__SYNC_GROUP_DEFINITION_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSync_group_definitionAccess().getSync_group_definition_valueSTRINGTerminalRuleCall_2_0(), semanticObject.getSync_group_definition_value());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     sync_schedule_definition returns sync_schedule_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_sync_schedule_definition(ISerializationContext context, sync_schedule_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SYNC_SCHEDULE_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SYNC_SCHEDULE_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSync_schedule_definitionAccess().getStringSTRINGTerminalRuleCall_2_0_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     tag_definition returns tag_definition
	 *
	 * Constraint:
	 *     (
	 *         tag_definition_tag_name=ID 
	 *         (dataitem_reference=dataitem_reference dataitem_reference2=dataitem_reference*)? 
	 *         (alt=tag_union_definition | alt=tag_minus_definition | alt=tag_intersect_definition)*
	 *     )
	 */
	protected void sequence_tag_definition(ISerializationContext context, tag_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     tag_intersect_definition returns tag_intersect_definition
	 *
	 * Constraint:
	 *     (dataitem_reference=dataitem_reference dataitem_reference=dataitem_reference*)
	 */
	protected void sequence_tag_intersect_definition(ISerializationContext context, tag_intersect_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     tag_minus_definition returns tag_minus_definition
	 *
	 * Constraint:
	 *     (dataitem_reference=dataitem_reference dataitem_reference=dataitem_reference*)
	 */
	protected void sequence_tag_minus_definition(ISerializationContext context, tag_minus_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     tag_union_definition returns tag_union_definition
	 *
	 * Constraint:
	 *     (dataitem_reference=dataitem_reference dataitem_reference=dataitem_reference*)
	 */
	protected void sequence_tag_union_definition(ISerializationContext context, tag_union_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     target_table returns target_table
	 *
	 * Constraint:
	 *     target_table_target_table_name=ID
	 */
	protected void sequence_target_table(ISerializationContext context, target_table semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TARGET_TABLE__TARGET_TABLE_TARGET_TABLE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TARGET_TABLE__TARGET_TABLE_TARGET_TABLE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTarget_tableAccess().getTarget_table_target_table_nameIDTerminalRuleCall_1_0(), semanticObject.getTarget_table_target_table_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     to_function_definition returns to_function_definition
	 *
	 * Constraint:
	 *     (to_function_definition_reference_object_name=ID (dataitem_reference=dataitem_reference dataitem_reference2=dataitem_reference*)?)
	 */
	protected void sequence_to_function_definition(ISerializationContext context, to_function_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     to_reference_definition returns to_reference_definition
	 *
	 * Constraint:
	 *     (to_reference_definition_reference_object_name=ID (dataitem_reference=dataitem_reference dataitem_reference2=dataitem_reference*)?)
	 */
	protected void sequence_to_reference_definition(ISerializationContext context, to_reference_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     transaction_group_definition returns transaction_group_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_transaction_group_definition(ISerializationContext context, transaction_group_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TRANSACTION_GROUP_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TRANSACTION_GROUP_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransaction_group_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     trigger_attribute_table_columns returns trigger_attribute_table_columns
	 *
	 * Constraint:
	 *     (trigger_attribute_table_column=ID* trigger_attribute_table_column=ID)
	 */
	protected void sequence_trigger_attribute_table_columns(ISerializationContext context, trigger_attribute_table_columns semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     trigger_attribute returns trigger_attribute
	 *
	 * Constraint:
	 *     (trigger_attribute_attribute_name=ID trigger_attribute_table_columns=trigger_attribute_table_columns?)
	 */
	protected void sequence_trigger_attribute(ISerializationContext context, trigger_attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     trigger_attributes returns trigger_attributes
	 *
	 * Constraint:
	 *     (alt=trigger_attribute | alt=combine_attribute)+
	 */
	protected void sequence_trigger_attributes(ISerializationContext context, trigger_attributes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     trigger_on_definition returns trigger_on_definition
	 *
	 * Constraint:
	 *     (trigger_on_definition_trigger_table_name=ID trigger_attribute_table_columns=trigger_attribute_table_columns?)
	 */
	protected void sequence_trigger_on_definition(ISerializationContext context, trigger_on_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     trigger returns trigger
	 *
	 * Constraint:
	 *     (
	 *         trigger_table_name=ID 
	 *         trigger_attributes=trigger_attributes 
	 *         (objkey_column=objkey_column | (target_table=target_table objkey_mapping=objkey_mapping mapping_arguments=mapping_arguments?)) 
	 *         guard_function=guard_function?
	 *     )
	 */
	protected void sequence_trigger(ISerializationContext context, trigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     type_definition returns type_definition
	 *
	 * Constraint:
	 *     (
	 *         (type_definition_true_value=STRING type_definition_false_value=STRING) | 
	 *         type_definition_mime_type=STRING | 
	 *         (type_definition_precision=INT type_definition_scale=INT?) | 
	 *         type_definition_mime_type=STRING | 
	 *         type_definition_mime_type=STRING | 
	 *         type_definition_structure_ref=ID | 
	 *         type_definition_entity_ref=ID | 
	 *         (type_definition_enumeration_ref=ID type_definition_enumeration_subset=ID?) | 
	 *         type_definition_enumeration_ref=ID | 
	 *         (type_definition_true_value=STRING type_definition_false_value=STRING) | 
	 *         (type_definition_precision=INT type_definition_scale=INT?) | 
	 *         type_definition_structure_ref=ID | 
	 *         type_definition_entity_ref=ID | 
	 *         (type_definition_enumeration_ref=ID type_definition_enumeration_subset=ID?) | 
	 *         type_definition_enumeration_ref=ID
	 *     )
	 */
	protected void sequence_type_definition(ISerializationContext context, type_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     updatable_flag_setting returns updatable_flag_setting
	 *
	 * Constraint:
	 *     keyword='editable'
	 */
	protected void sequence_updatable_flag_setting(ISerializationContext context, updatable_flag_setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.UPDATABLE_FLAG_SETTING__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.UPDATABLE_FLAG_SETTING__KEYWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdatable_flag_settingAccess().getKeywordEditableKeyword_0_0(), semanticObject.getKeyword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     use_attributes_definition returns use_attributes_definition
	 *
	 * Constraint:
	 *     (attribute_reference=ID attribute_reference2=ID*)
	 */
	protected void sequence_use_attributes_definition(ISerializationContext context, use_attributes_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     user_column_definition returns user_column_definition
	 *
	 * Constraint:
	 *     user_column_definition_user_column_name=ID
	 */
	protected void sequence_user_column_definition(ISerializationContext context, user_column_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.USER_COLUMN_DEFINITION__USER_COLUMN_DEFINITION_USER_COLUMN_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.USER_COLUMN_DEFINITION__USER_COLUMN_DEFINITION_USER_COLUMN_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUser_column_definitionAccess().getUser_column_definition_user_column_nameIDTerminalRuleCall_1_0(), semanticObject.getUser_column_definition_user_column_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns user_filter_definition
	 *     user_filter_definition returns user_filter_definition
	 *
	 * Constraint:
	 *     (
	 *         user_filter_definition_filter_name=ID 
	 *         view_filter_definition=view_filter_definition 
	 *         user_column_definition=user_column_definition 
	 *         filter_columns_definition=filter_columns_definition 
	 *         trigger_on_definition=trigger_on_definition+
	 *     )
	 */
	protected void sequence_user_filter_definition(ISerializationContext context, user_filter_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     user_filter_reference returns user_filter_reference
	 *
	 * Constraint:
	 *     (user_filter_reference_user_filter_ref=ID (user_filter_attr_name=ID* user_filter_attr_name=ID)?)
	 */
	protected void sequence_user_filter_reference(ISerializationContext context, user_filter_reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     validate_action_reference returns validate_action_reference
	 *
	 * Constraint:
	 *     validate_action_reference_action_ref=ID
	 */
	protected void sequence_validate_action_reference(ISerializationContext context, validate_action_reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VALIDATE_ACTION_REFERENCE__VALIDATE_ACTION_REFERENCE_ACTION_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VALIDATE_ACTION_REFERENCE__VALIDATE_ACTION_REFERENCE_ACTION_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidate_action_referenceAccess().getValidate_action_reference_action_refIDTerminalRuleCall_2_0(), semanticObject.getValidate_action_reference_action_ref());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     validation_definition returns validation_definition
	 *
	 * Constraint:
	 *     (projection_flag_condition=projection_flag_condition string=STRING)
	 */
	protected void sequence_validation_definition(ISerializationContext context, validation_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VALIDATION_DEFINITION__PROJECTION_FLAG_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VALIDATION_DEFINITION__PROJECTION_FLAG_CONDITION));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VALIDATION_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VALIDATION_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidation_definitionAccess().getProjection_flag_conditionProjection_flag_conditionParserRuleCall_2_0(), semanticObject.getProjection_flag_condition());
		feeder.accept(grammarAccess.getValidation_definitionAccess().getStringSTRINGTerminalRuleCall_5_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     view_filter_definition returns view_filter_definition
	 *
	 * Constraint:
	 *     view_filter_definition_view_name=ID
	 */
	protected void sequence_view_filter_definition(ISerializationContext context, view_filter_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VIEW_FILTER_DEFINITION__VIEW_FILTER_DEFINITION_VIEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VIEW_FILTER_DEFINITION__VIEW_FILTER_DEFINITION_VIEW_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getView_filter_definitionAccess().getView_filter_definition_view_nameIDTerminalRuleCall_1_0(), semanticObject.getView_filter_definition_view_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     virtual_definition returns virtual_definition
	 *
	 * Constraint:
	 *     (
	 *         dynamic_component_dependency=dynamic_component_dependency* 
	 *         virtual_definition_virtual_name=ID 
	 *         virtual_definition_reference_object_name=ID? 
	 *         (
	 *             alt=warnings_enabled_flag | 
	 *             alt=keys_definition | 
	 *             alt=dependencies_definition | 
	 *             alt=crud_definition | 
	 *             alt=dataitem_definition | 
	 *             alt=function_definition | 
	 *             alt=action_definition | 
	 *             alt=array_definition | 
	 *             alt=aggregate_definition
	 *         )*
	 *     )
	 */
	protected void sequence_virtual_definition(ISerializationContext context, virtual_definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     warnings_enabled_flag returns warnings_enabled_flag
	 *
	 * Constraint:
	 *     projection_flag_condition=projection_flag_condition
	 */
	protected void sequence_warnings_enabled_flag(ISerializationContext context, warnings_enabled_flag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WARNINGS_ENABLED_FLAG__PROJECTION_FLAG_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WARNINGS_ENABLED_FLAG__PROJECTION_FLAG_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWarnings_enabled_flagAccess().getProjection_flag_conditionProjection_flag_conditionParserRuleCall_3_0(), semanticObject.getProjection_flag_condition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     where_definition returns where_definition
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_where_definition(ISerializationContext context, where_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WHERE_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WHERE_DEFINITION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhere_definitionAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     where_filter_definition returns where_filter_definition
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_where_filter_definition(ISerializationContext context, where_filter_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WHERE_FILTER_DEFINITION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WHERE_FILTER_DEFINITION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhere_filter_definitionAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
}
