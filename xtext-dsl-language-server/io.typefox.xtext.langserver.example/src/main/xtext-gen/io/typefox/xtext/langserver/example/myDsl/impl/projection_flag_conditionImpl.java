/**
 * generated by Xtext 2.13.0
 */
package io.typefox.xtext.langserver.example.myDsl.impl;

import io.typefox.xtext.langserver.example.myDsl.MyDslPackage;
import io.typefox.xtext.langserver.example.myDsl.projection_flag_condition;
import io.typefox.xtext.langserver.example.myDsl.projection_flag_condition_atom;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>projection flag condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.typefox.xtext.langserver.example.myDsl.impl.projection_flag_conditionImpl#getProjection_flag_condition_atom <em>Projection flag condition atom</em>}</li>
 *   <li>{@link io.typefox.xtext.langserver.example.myDsl.impl.projection_flag_conditionImpl#getProjection_flag_condition <em>Projection flag condition</em>}</li>
 *   <li>{@link io.typefox.xtext.langserver.example.myDsl.impl.projection_flag_conditionImpl#getAlt <em>Alt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class projection_flag_conditionImpl extends MinimalEObjectImpl.Container implements projection_flag_condition
{
  /**
   * The cached value of the '{@link #getProjection_flag_condition_atom() <em>Projection flag condition atom</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjection_flag_condition_atom()
   * @generated
   * @ordered
   */
  protected projection_flag_condition_atom projection_flag_condition_atom;

  /**
   * The cached value of the '{@link #getProjection_flag_condition() <em>Projection flag condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjection_flag_condition()
   * @generated
   * @ordered
   */
  protected projection_flag_condition projection_flag_condition;

  /**
   * The default value of the '{@link #getAlt() <em>Alt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlt()
   * @generated
   * @ordered
   */
  protected static final String ALT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAlt() <em>Alt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlt()
   * @generated
   * @ordered
   */
  protected String alt = ALT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected projection_flag_conditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.PROJECTION_FLAG_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public projection_flag_condition_atom getProjection_flag_condition_atom()
  {
    return projection_flag_condition_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProjection_flag_condition_atom(projection_flag_condition_atom newProjection_flag_condition_atom, NotificationChain msgs)
  {
    projection_flag_condition_atom oldProjection_flag_condition_atom = projection_flag_condition_atom;
    projection_flag_condition_atom = newProjection_flag_condition_atom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION_ATOM, oldProjection_flag_condition_atom, newProjection_flag_condition_atom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProjection_flag_condition_atom(projection_flag_condition_atom newProjection_flag_condition_atom)
  {
    if (newProjection_flag_condition_atom != projection_flag_condition_atom)
    {
      NotificationChain msgs = null;
      if (projection_flag_condition_atom != null)
        msgs = ((InternalEObject)projection_flag_condition_atom).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION_ATOM, null, msgs);
      if (newProjection_flag_condition_atom != null)
        msgs = ((InternalEObject)newProjection_flag_condition_atom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION_ATOM, null, msgs);
      msgs = basicSetProjection_flag_condition_atom(newProjection_flag_condition_atom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION_ATOM, newProjection_flag_condition_atom, newProjection_flag_condition_atom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public projection_flag_condition getProjection_flag_condition()
  {
    return projection_flag_condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProjection_flag_condition(projection_flag_condition newProjection_flag_condition, NotificationChain msgs)
  {
    projection_flag_condition oldProjection_flag_condition = projection_flag_condition;
    projection_flag_condition = newProjection_flag_condition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION, oldProjection_flag_condition, newProjection_flag_condition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProjection_flag_condition(projection_flag_condition newProjection_flag_condition)
  {
    if (newProjection_flag_condition != projection_flag_condition)
    {
      NotificationChain msgs = null;
      if (projection_flag_condition != null)
        msgs = ((InternalEObject)projection_flag_condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION, null, msgs);
      if (newProjection_flag_condition != null)
        msgs = ((InternalEObject)newProjection_flag_condition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION, null, msgs);
      msgs = basicSetProjection_flag_condition(newProjection_flag_condition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION, newProjection_flag_condition, newProjection_flag_condition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAlt()
  {
    return alt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlt(String newAlt)
  {
    String oldAlt = alt;
    alt = newAlt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.PROJECTION_FLAG_CONDITION__ALT, oldAlt, alt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION_ATOM:
        return basicSetProjection_flag_condition_atom(null, msgs);
      case MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION:
        return basicSetProjection_flag_condition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION_ATOM:
        return getProjection_flag_condition_atom();
      case MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION:
        return getProjection_flag_condition();
      case MyDslPackage.PROJECTION_FLAG_CONDITION__ALT:
        return getAlt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION_ATOM:
        setProjection_flag_condition_atom((projection_flag_condition_atom)newValue);
        return;
      case MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION:
        setProjection_flag_condition((projection_flag_condition)newValue);
        return;
      case MyDslPackage.PROJECTION_FLAG_CONDITION__ALT:
        setAlt((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION_ATOM:
        setProjection_flag_condition_atom((projection_flag_condition_atom)null);
        return;
      case MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION:
        setProjection_flag_condition((projection_flag_condition)null);
        return;
      case MyDslPackage.PROJECTION_FLAG_CONDITION__ALT:
        setAlt(ALT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION_ATOM:
        return projection_flag_condition_atom != null;
      case MyDslPackage.PROJECTION_FLAG_CONDITION__PROJECTION_FLAG_CONDITION:
        return projection_flag_condition != null;
      case MyDslPackage.PROJECTION_FLAG_CONDITION__ALT:
        return ALT_EDEFAULT == null ? alt != null : !ALT_EDEFAULT.equals(alt);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (alt: ");
    result.append(alt);
    result.append(')');
    return result.toString();
  }

} //projection_flag_conditionImpl
