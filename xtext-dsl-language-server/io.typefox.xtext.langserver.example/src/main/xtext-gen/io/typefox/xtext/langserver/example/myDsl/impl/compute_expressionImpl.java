/**
 * generated by Xtext 2.13.0
 */
package io.typefox.xtext.langserver.example.myDsl.impl;

import io.typefox.xtext.langserver.example.myDsl.MyDslPackage;
import io.typefox.xtext.langserver.example.myDsl.compute_expression;
import io.typefox.xtext.langserver.example.myDsl.compute_expression_atom;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>compute expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.typefox.xtext.langserver.example.myDsl.impl.compute_expressionImpl#getCompute_expression_atom <em>Compute expression atom</em>}</li>
 *   <li>{@link io.typefox.xtext.langserver.example.myDsl.impl.compute_expressionImpl#getCompute_expression <em>Compute expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class compute_expressionImpl extends MinimalEObjectImpl.Container implements compute_expression
{
  /**
   * The cached value of the '{@link #getCompute_expression_atom() <em>Compute expression atom</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompute_expression_atom()
   * @generated
   * @ordered
   */
  protected compute_expression_atom compute_expression_atom;

  /**
   * The cached value of the '{@link #getCompute_expression() <em>Compute expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompute_expression()
   * @generated
   * @ordered
   */
  protected compute_expression compute_expression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected compute_expressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.COMPUTE_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public compute_expression_atom getCompute_expression_atom()
  {
    return compute_expression_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompute_expression_atom(compute_expression_atom newCompute_expression_atom, NotificationChain msgs)
  {
    compute_expression_atom oldCompute_expression_atom = compute_expression_atom;
    compute_expression_atom = newCompute_expression_atom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION_ATOM, oldCompute_expression_atom, newCompute_expression_atom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompute_expression_atom(compute_expression_atom newCompute_expression_atom)
  {
    if (newCompute_expression_atom != compute_expression_atom)
    {
      NotificationChain msgs = null;
      if (compute_expression_atom != null)
        msgs = ((InternalEObject)compute_expression_atom).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION_ATOM, null, msgs);
      if (newCompute_expression_atom != null)
        msgs = ((InternalEObject)newCompute_expression_atom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION_ATOM, null, msgs);
      msgs = basicSetCompute_expression_atom(newCompute_expression_atom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION_ATOM, newCompute_expression_atom, newCompute_expression_atom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public compute_expression getCompute_expression()
  {
    return compute_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompute_expression(compute_expression newCompute_expression, NotificationChain msgs)
  {
    compute_expression oldCompute_expression = compute_expression;
    compute_expression = newCompute_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION, oldCompute_expression, newCompute_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompute_expression(compute_expression newCompute_expression)
  {
    if (newCompute_expression != compute_expression)
    {
      NotificationChain msgs = null;
      if (compute_expression != null)
        msgs = ((InternalEObject)compute_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION, null, msgs);
      if (newCompute_expression != null)
        msgs = ((InternalEObject)newCompute_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION, null, msgs);
      msgs = basicSetCompute_expression(newCompute_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION, newCompute_expression, newCompute_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION_ATOM:
        return basicSetCompute_expression_atom(null, msgs);
      case MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION:
        return basicSetCompute_expression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION_ATOM:
        return getCompute_expression_atom();
      case MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION:
        return getCompute_expression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION_ATOM:
        setCompute_expression_atom((compute_expression_atom)newValue);
        return;
      case MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION:
        setCompute_expression((compute_expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION_ATOM:
        setCompute_expression_atom((compute_expression_atom)null);
        return;
      case MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION:
        setCompute_expression((compute_expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION_ATOM:
        return compute_expression_atom != null;
      case MyDslPackage.COMPUTE_EXPRESSION__COMPUTE_EXPRESSION:
        return compute_expression != null;
    }
    return super.eIsSet(featureID);
  }

} //compute_expressionImpl
