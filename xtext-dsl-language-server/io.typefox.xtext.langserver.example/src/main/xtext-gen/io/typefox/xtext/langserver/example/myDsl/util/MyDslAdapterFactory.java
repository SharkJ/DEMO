/**
 * generated by Xtext 2.13.0
 */
package io.typefox.xtext.langserver.example.myDsl.util;

import io.typefox.xtext.langserver.example.myDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see io.typefox.xtext.langserver.example.myDsl.MyDslPackage
 * @generated
 */
public class MyDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyDslSwitch<Adapter> modelSwitch =
    new MyDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseDomainmodel(Domainmodel object)
      {
        return createDomainmodelAdapter();
      }
      @Override
      public Adapter caseMainElement(MainElement object)
      {
        return createMainElementAdapter();
      }
      @Override
      public Adapter caseprojection_name(projection_name object)
      {
        return createprojection_nameAdapter();
      }
      @Override
      public Adapter caseprojection_component(projection_component object)
      {
        return createprojection_componentAdapter();
      }
      @Override
      public Adapter caselayer_specification(layer_specification object)
      {
        return createlayer_specificationAdapter();
      }
      @Override
      public Adapter casedescription(description object)
      {
        return createdescriptionAdapter();
      }
      @Override
      public Adapter casecapability(capability object)
      {
        return createcapabilityAdapter();
      }
      @Override
      public Adapter casecategory(category object)
      {
        return createcategoryAdapter();
      }
      @Override
      public Adapter caseservice_group(service_group object)
      {
        return createservice_groupAdapter();
      }
      @Override
      public Adapter caseinclude_fragment(include_fragment object)
      {
        return createinclude_fragmentAdapter();
      }
      @Override
      public Adapter caseoverride(override object)
      {
        return createoverrideAdapter();
      }
      @Override
      public Adapter caseovertake(overtake object)
      {
        return createovertakeAdapter();
      }
      @Override
      public Adapter caseentity_set_definition(entity_set_definition object)
      {
        return createentity_set_definitionAdapter();
      }
      @Override
      public Adapter casewhere_definition(where_definition object)
      {
        return createwhere_definitionAdapter();
      }
      @Override
      public Adapter casefiltering_context_list_definition(filtering_context_list_definition object)
      {
        return createfiltering_context_list_definitionAdapter();
      }
      @Override
      public Adapter caseoffline_filter_definition(offline_filter_definition object)
      {
        return createoffline_filter_definitionAdapter();
      }
      @Override
      public Adapter casesingleton_set_definition(singleton_set_definition object)
      {
        return createsingleton_set_definitionAdapter();
      }
      @Override
      public Adapter casecomputeditem_definition(computeditem_definition object)
      {
        return createcomputeditem_definitionAdapter();
      }
      @Override
      public Adapter casecompute_definition(compute_definition object)
      {
        return createcompute_definitionAdapter();
      }
      @Override
      public Adapter casecompute_expression(compute_expression object)
      {
        return createcompute_expressionAdapter();
      }
      @Override
      public Adapter casecompute_expression_atom(compute_expression_atom object)
      {
        return createcompute_expression_atomAdapter();
      }
      @Override
      public Adapter casecompute_expression_atom_value(compute_expression_atom_value object)
      {
        return createcompute_expression_atom_valueAdapter();
      }
      @Override
      public Adapter casedatasource_definition(datasource_definition object)
      {
        return createdatasource_definitionAdapter();
      }
      @Override
      public Adapter casekey_fetch_on_create_flag(key_fetch_on_create_flag object)
      {
        return createkey_fetch_on_create_flagAdapter();
      }
      @Override
      public Adapter caseluname_definition(luname_definition object)
      {
        return createluname_definitionAdapter();
      }
      @Override
      public Adapter casekeyref_definition(keyref_definition object)
      {
        return createkeyref_definitionAdapter();
      }
      @Override
      public Adapter casevalidate_action_reference(validate_action_reference object)
      {
        return createvalidate_action_referenceAdapter();
      }
      @Override
      public Adapter casestatemachine_definition(statemachine_definition object)
      {
        return createstatemachine_definitionAdapter();
      }
      @Override
      public Adapter casestate_event_definition(state_event_definition object)
      {
        return createstate_event_definitionAdapter();
      }
      @Override
      public Adapter caseuse_attributes_definition(use_attributes_definition object)
      {
        return createuse_attributes_definitionAdapter();
      }
      @Override
      public Adapter caseexclude_attributes_definition(exclude_attributes_definition object)
      {
        return createexclude_attributes_definitionAdapter();
      }
      @Override
      public Adapter casetag_definition(tag_definition object)
      {
        return createtag_definitionAdapter();
      }
      @Override
      public Adapter casetag_union_definition(tag_union_definition object)
      {
        return createtag_union_definitionAdapter();
      }
      @Override
      public Adapter casetag_minus_definition(tag_minus_definition object)
      {
        return createtag_minus_definitionAdapter();
      }
      @Override
      public Adapter casetag_intersect_definition(tag_intersect_definition object)
      {
        return createtag_intersect_definitionAdapter();
      }
      @Override
      public Adapter casesync_policy_definition(sync_policy_definition object)
      {
        return createsync_policy_definitionAdapter();
      }
      @Override
      public Adapter casebatch_sync_policy_definition(batch_sync_policy_definition object)
      {
        return createbatch_sync_policy_definitionAdapter();
      }
      @Override
      public Adapter casesync_schedule_definition(sync_schedule_definition object)
      {
        return createsync_schedule_definitionAdapter();
      }
      @Override
      public Adapter casebatch_sync_hourly_policy(batch_sync_hourly_policy object)
      {
        return createbatch_sync_hourly_policyAdapter();
      }
      @Override
      public Adapter casebatch_sync_daily_policy(batch_sync_daily_policy object)
      {
        return createbatch_sync_daily_policyAdapter();
      }
      @Override
      public Adapter casebatch_sync_weekly_policy(batch_sync_weekly_policy object)
      {
        return createbatch_sync_weekly_policyAdapter();
      }
      @Override
      public Adapter casebatch_sync_weekday(batch_sync_weekday object)
      {
        return createbatch_sync_weekdayAdapter();
      }
      @Override
      public Adapter casebatch_sync_monthly_policy(batch_sync_monthly_policy object)
      {
        return createbatch_sync_monthly_policyAdapter();
      }
      @Override
      public Adapter casesync_group_definition(sync_group_definition object)
      {
        return createsync_group_definitionAdapter();
      }
      @Override
      public Adapter casefilter_on_entity_setting(filter_on_entity_setting object)
      {
        return createfilter_on_entity_settingAdapter();
      }
      @Override
      public Adapter caseincoming_sync_policy_definition(incoming_sync_policy_definition object)
      {
        return createincoming_sync_policy_definitionAdapter();
      }
      @Override
      public Adapter caseclient_cache_sync_policy_definition(client_cache_sync_policy_definition object)
      {
        return createclient_cache_sync_policy_definitionAdapter();
      }
      @Override
      public Adapter casecache_invalidation_definition(cache_invalidation_definition object)
      {
        return createcache_invalidation_definitionAdapter();
      }
      @Override
      public Adapter casecache_invalidation_after(cache_invalidation_after object)
      {
        return createcache_invalidation_afterAdapter();
      }
      @Override
      public Adapter caseonline_only_sync_policy_definition(online_only_sync_policy_definition object)
      {
        return createonline_only_sync_policy_definitionAdapter();
      }
      @Override
      public Adapter casepush_sync_policy_definition(push_sync_policy_definition object)
      {
        return createpush_sync_policy_definitionAdapter();
      }
      @Override
      public Adapter caseguard_condition_definition(guard_condition_definition object)
      {
        return createguard_condition_definitionAdapter();
      }
      @Override
      public Adapter caseownership_query_definition(ownership_query_definition object)
      {
        return createownership_query_definitionAdapter();
      }
      @Override
      public Adapter caseexclude_details_setting(exclude_details_setting object)
      {
        return createexclude_details_settingAdapter();
      }
      @Override
      public Adapter casegrouped_push_sync_policy_definition(grouped_push_sync_policy_definition object)
      {
        return creategrouped_push_sync_policy_definitionAdapter();
      }
      @Override
      public Adapter caseuser_filter_reference(user_filter_reference object)
      {
        return createuser_filter_referenceAdapter();
      }
      @Override
      public Adapter caselanguage_dependent_definition(language_dependent_definition object)
      {
        return createlanguage_dependent_definitionAdapter();
      }
      @Override
      public Adapter caselanguage_dependent_definition_language_dependent_type(language_dependent_definition_language_dependent_type object)
      {
        return createlanguage_dependent_definition_language_dependent_typeAdapter();
      }
      @Override
      public Adapter casechange_detection_definition(change_detection_definition object)
      {
        return createchange_detection_definitionAdapter();
      }
      @Override
      public Adapter casetrigger(trigger object)
      {
        return createtriggerAdapter();
      }
      @Override
      public Adapter casetrigger_attributes(trigger_attributes object)
      {
        return createtrigger_attributesAdapter();
      }
      @Override
      public Adapter casetrigger_attribute(trigger_attribute object)
      {
        return createtrigger_attributeAdapter();
      }
      @Override
      public Adapter casecombine_attribute(combine_attribute object)
      {
        return createcombine_attributeAdapter();
      }
      @Override
      public Adapter casetrigger_attribute_table_columns(trigger_attribute_table_columns object)
      {
        return createtrigger_attribute_table_columnsAdapter();
      }
      @Override
      public Adapter casemapping_arguments(mapping_arguments object)
      {
        return createmapping_argumentsAdapter();
      }
      @Override
      public Adapter caseobjkey_column(objkey_column object)
      {
        return createobjkey_columnAdapter();
      }
      @Override
      public Adapter casetarget_table(target_table object)
      {
        return createtarget_tableAdapter();
      }
      @Override
      public Adapter caseobjkey_mapping(objkey_mapping object)
      {
        return createobjkey_mappingAdapter();
      }
      @Override
      public Adapter caseguard_function(guard_function object)
      {
        return createguard_functionAdapter();
      }
      @Override
      public Adapter caseexclude_from_config_flag_setting(exclude_from_config_flag_setting object)
      {
        return createexclude_from_config_flag_settingAdapter();
      }
      @Override
      public Adapter casesummary_definition(summary_definition object)
      {
        return createsummary_definitionAdapter();
      }
      @Override
      public Adapter casequery_definition(query_definition object)
      {
        return createquery_definitionAdapter();
      }
      @Override
      public Adapter caselu_definition(lu_definition object)
      {
        return createlu_definitionAdapter();
      }
      @Override
      public Adapter caseenumeration_definition(enumeration_definition object)
      {
        return createenumeration_definitionAdapter();
      }
      @Override
      public Adapter caseenumeration_type_definition(enumeration_type_definition object)
      {
        return createenumeration_type_definitionAdapter();
      }
      @Override
      public Adapter caseenumeration_type_definition_enumeration_type(enumeration_type_definition_enumeration_type object)
      {
        return createenumeration_type_definition_enumeration_typeAdapter();
      }
      @Override
      public Adapter caseenumeration_value_definition(enumeration_value_definition object)
      {
        return createenumeration_value_definitionAdapter();
      }
      @Override
      public Adapter caseexec_definition(exec_definition object)
      {
        return createexec_definitionAdapter();
      }
      @Override
      public Adapter caselabel_definition(label_definition object)
      {
        return createlabel_definitionAdapter();
      }
      @Override
      public Adapter caseuser_filter_definition(user_filter_definition object)
      {
        return createuser_filter_definitionAdapter();
      }
      @Override
      public Adapter caseview_filter_definition(view_filter_definition object)
      {
        return createview_filter_definitionAdapter();
      }
      @Override
      public Adapter caseuser_column_definition(user_column_definition object)
      {
        return createuser_column_definitionAdapter();
      }
      @Override
      public Adapter casefilter_columns_definition(filter_columns_definition object)
      {
        return createfilter_columns_definitionAdapter();
      }
      @Override
      public Adapter casefilter_column_definition(filter_column_definition object)
      {
        return createfilter_column_definitionAdapter();
      }
      @Override
      public Adapter casefilter_column_operator(filter_column_operator object)
      {
        return createfilter_column_operatorAdapter();
      }
      @Override
      public Adapter casefilter_column_operator_filter_column_operator_name(filter_column_operator_filter_column_operator_name object)
      {
        return createfilter_column_operator_filter_column_operator_nameAdapter();
      }
      @Override
      public Adapter casenull_image(null_image object)
      {
        return createnull_imageAdapter();
      }
      @Override
      public Adapter casenull_image_null_match(null_image_null_match object)
      {
        return createnull_image_null_matchAdapter();
      }
      @Override
      public Adapter casetrigger_on_definition(trigger_on_definition object)
      {
        return createtrigger_on_definitionAdapter();
      }
      @Override
      public Adapter caseaction_definition(action_definition object)
      {
        return createaction_definitionAdapter();
      }
      @Override
      public Adapter casetype_definition(type_definition object)
      {
        return createtype_definitionAdapter();
      }
      @Override
      public Adapter caseimplementation_definition(implementation_definition object)
      {
        return createimplementation_definitionAdapter();
      }
      @Override
      public Adapter casedependency_definition(dependency_definition object)
      {
        return createdependency_definitionAdapter();
      }
      @Override
      public Adapter caseserver_package_reference(server_package_reference object)
      {
        return createserver_package_referenceAdapter();
      }
      @Override
      public Adapter casedependencies_definition(dependencies_definition object)
      {
        return createdependencies_definitionAdapter();
      }
      @Override
      public Adapter casemandatory_flag_setting(mandatory_flag_setting object)
      {
        return createmandatory_flag_settingAdapter();
      }
      @Override
      public Adapter caseprojection_flag_condition(projection_flag_condition object)
      {
        return createprojection_flag_conditionAdapter();
      }
      @Override
      public Adapter caseprojection_flag_condition_atom(projection_flag_condition_atom object)
      {
        return createprojection_flag_condition_atomAdapter();
      }
      @Override
      public Adapter caseprojection_flag_condition_atom_value(projection_flag_condition_atom_value object)
      {
        return createprojection_flag_condition_atom_valueAdapter();
      }
      @Override
      public Adapter caseparameter_definition(parameter_definition object)
      {
        return createparameter_definitionAdapter();
      }
      @Override
      public Adapter caseavailable_flag_setting(available_flag_setting object)
      {
        return createavailable_flag_settingAdapter();
      }
      @Override
      public Adapter casetransaction_group_definition(transaction_group_definition object)
      {
        return createtransaction_group_definitionAdapter();
      }
      @Override
      public Adapter caseoffline_sync_policy_definition(offline_sync_policy_definition object)
      {
        return createoffline_sync_policy_definitionAdapter();
      }
      @Override
      public Adapter casesupport_warnings_flag_setting(support_warnings_flag_setting object)
      {
        return createsupport_warnings_flag_settingAdapter();
      }
      @Override
      public Adapter casefunction_definition(function_definition object)
      {
        return createfunction_definitionAdapter();
      }
      @Override
      public Adapter casebased_on_entity_set_definition(based_on_entity_set_definition object)
      {
        return createbased_on_entity_set_definitionAdapter();
      }
      @Override
      public Adapter casesupport_file_info_flag(support_file_info_flag object)
      {
        return createsupport_file_info_flagAdapter();
      }
      @Override
      public Adapter casefrom_definition(from_definition object)
      {
        return createfrom_definitionAdapter();
      }
      @Override
      public Adapter casealter_attribute_definition(alter_attribute_definition object)
      {
        return createalter_attribute_definitionAdapter();
      }
      @Override
      public Adapter casefetch_definition(fetch_definition object)
      {
        return createfetch_definitionAdapter();
      }
      @Override
      public Adapter casecomplextype_definition(complextype_definition object)
      {
        return createcomplextype_definitionAdapter();
      }
      @Override
      public Adapter casevirtual_definition(virtual_definition object)
      {
        return createvirtual_definitionAdapter();
      }
      @Override
      public Adapter casewarnings_enabled_flag(warnings_enabled_flag object)
      {
        return createwarnings_enabled_flagAdapter();
      }
      @Override
      public Adapter casekeys_definition(keys_definition object)
      {
        return createkeys_definitionAdapter();
      }
      @Override
      public Adapter casecrud_definition(crud_definition object)
      {
        return createcrud_definitionAdapter();
      }
      @Override
      public Adapter casecrud_reference(crud_reference object)
      {
        return createcrud_referenceAdapter();
      }
      @Override
      public Adapter casedataitem_definition(dataitem_definition object)
      {
        return createdataitem_definitionAdapter();
      }
      @Override
      public Adapter caseenum_lookup_list_flag_setting(enum_lookup_list_flag_setting object)
      {
        return createenum_lookup_list_flag_settingAdapter();
      }
      @Override
      public Adapter casedefault_data_definition(default_data_definition object)
      {
        return createdefault_data_definitionAdapter();
      }
      @Override
      public Adapter caseregexp_definition(regexp_definition object)
      {
        return createregexp_definitionAdapter();
      }
      @Override
      public Adapter casemaxlength_definition(maxlength_definition object)
      {
        return createmaxlength_definitionAdapter();
      }
      @Override
      public Adapter caseformat_definition(format_definition object)
      {
        return createformat_definitionAdapter();
      }
      @Override
      public Adapter caseinline_property_setting(inline_property_setting object)
      {
        return createinline_property_settingAdapter();
      }
      @Override
      public Adapter caselov_flag_setting(lov_flag_setting object)
      {
        return createlov_flag_settingAdapter();
      }
      @Override
      public Adapter caseupdatable_flag_setting(updatable_flag_setting object)
      {
        return createupdatable_flag_settingAdapter();
      }
      @Override
      public Adapter caseserver_updatable_flag_setting(server_updatable_flag_setting object)
      {
        return createserver_updatable_flag_settingAdapter();
      }
      @Override
      public Adapter caseserver_insertable_flag_setting(server_insertable_flag_setting object)
      {
        return createserver_insertable_flag_settingAdapter();
      }
      @Override
      public Adapter casevalidation_definition(validation_definition object)
      {
        return createvalidation_definitionAdapter();
      }
      @Override
      public Adapter caseimplementation_type_definition(implementation_type_definition object)
      {
        return createimplementation_type_definitionAdapter();
      }
      @Override
      public Adapter casestream_file_info_definition(stream_file_info_definition object)
      {
        return createstream_file_info_definitionAdapter();
      }
      @Override
      public Adapter casestream_file_name_attribute(stream_file_name_attribute object)
      {
        return createstream_file_name_attributeAdapter();
      }
      @Override
      public Adapter casestream_mime_type_attribute(stream_mime_type_attribute object)
      {
        return createstream_mime_type_attributeAdapter();
      }
      @Override
      public Adapter casestream_attachment_attribute(stream_attachment_attribute object)
      {
        return createstream_attachment_attributeAdapter();
      }
      @Override
      public Adapter casedataitem_reference(dataitem_reference object)
      {
        return createdataitem_referenceAdapter();
      }
      @Override
      public Adapter caseaggregate_definition(aggregate_definition object)
      {
        return createaggregate_definitionAdapter();
      }
      @Override
      public Adapter casekey_reference(key_reference object)
      {
        return createkey_referenceAdapter();
      }
      @Override
      public Adapter caseto_reference_definition(to_reference_definition object)
      {
        return createto_reference_definitionAdapter();
      }
      @Override
      public Adapter caseto_function_definition(to_function_definition object)
      {
        return createto_function_definitionAdapter();
      }
      @Override
      public Adapter caseprefetch_definition(prefetch_definition object)
      {
        return createprefetch_definitionAdapter();
      }
      @Override
      public Adapter casecopy_definition(copy_definition object)
      {
        return createcopy_definitionAdapter();
      }
      @Override
      public Adapter casewhere_filter_definition(where_filter_definition object)
      {
        return createwhere_filter_definitionAdapter();
      }
      @Override
      public Adapter caseaggregate_list_flag_setting(aggregate_list_flag_setting object)
      {
        return createaggregate_list_flag_settingAdapter();
      }
      @Override
      public Adapter caseaggregate_check_flag_setting(aggregate_check_flag_setting object)
      {
        return createaggregate_check_flag_settingAdapter();
      }
      @Override
      public Adapter caseaggregate_wildcard_definition(aggregate_wildcard_definition object)
      {
        return createaggregate_wildcard_definitionAdapter();
      }
      @Override
      public Adapter casearray_definition(array_definition object)
      {
        return createarray_definitionAdapter();
      }
      @Override
      public Adapter casefiltering_context_definition(filtering_context_definition object)
      {
        return createfiltering_context_definitionAdapter();
      }
      @Override
      public Adapter casefiltering_context_property(filtering_context_property object)
      {
        return createfiltering_context_propertyAdapter();
      }
      @Override
      public Adapter caseabstract_def(abstract_def object)
      {
        return createabstract_defAdapter();
      }
      @Override
      public Adapter casedynamic_component_dependency(dynamic_component_dependency object)
      {
        return createdynamic_component_dependencyAdapter();
      }
      @Override
      public Adapter caseidentifier(identifier object)
      {
        return createidentifierAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.Domainmodel <em>Domainmodel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.Domainmodel
   * @generated
   */
  public Adapter createDomainmodelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.MainElement <em>Main Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.MainElement
   * @generated
   */
  public Adapter createMainElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.projection_name <em>projection name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.projection_name
   * @generated
   */
  public Adapter createprojection_nameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.projection_component <em>projection component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.projection_component
   * @generated
   */
  public Adapter createprojection_componentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.layer_specification <em>layer specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.layer_specification
   * @generated
   */
  public Adapter createlayer_specificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.description <em>description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.description
   * @generated
   */
  public Adapter createdescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.capability <em>capability</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.capability
   * @generated
   */
  public Adapter createcapabilityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.category <em>category</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.category
   * @generated
   */
  public Adapter createcategoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.service_group <em>service group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.service_group
   * @generated
   */
  public Adapter createservice_groupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.include_fragment <em>include fragment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.include_fragment
   * @generated
   */
  public Adapter createinclude_fragmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.override <em>override</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.override
   * @generated
   */
  public Adapter createoverrideAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.overtake <em>overtake</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.overtake
   * @generated
   */
  public Adapter createovertakeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.entity_set_definition <em>entity set definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.entity_set_definition
   * @generated
   */
  public Adapter createentity_set_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.where_definition <em>where definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.where_definition
   * @generated
   */
  public Adapter createwhere_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.filtering_context_list_definition <em>filtering context list definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.filtering_context_list_definition
   * @generated
   */
  public Adapter createfiltering_context_list_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.offline_filter_definition <em>offline filter definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.offline_filter_definition
   * @generated
   */
  public Adapter createoffline_filter_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.singleton_set_definition <em>singleton set definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.singleton_set_definition
   * @generated
   */
  public Adapter createsingleton_set_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.computeditem_definition <em>computeditem definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.computeditem_definition
   * @generated
   */
  public Adapter createcomputeditem_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.compute_definition <em>compute definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.compute_definition
   * @generated
   */
  public Adapter createcompute_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.compute_expression <em>compute expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.compute_expression
   * @generated
   */
  public Adapter createcompute_expressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.compute_expression_atom <em>compute expression atom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.compute_expression_atom
   * @generated
   */
  public Adapter createcompute_expression_atomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.compute_expression_atom_value <em>compute expression atom value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.compute_expression_atom_value
   * @generated
   */
  public Adapter createcompute_expression_atom_valueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.datasource_definition <em>datasource definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.datasource_definition
   * @generated
   */
  public Adapter createdatasource_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.key_fetch_on_create_flag <em>key fetch on create flag</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.key_fetch_on_create_flag
   * @generated
   */
  public Adapter createkey_fetch_on_create_flagAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.luname_definition <em>luname definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.luname_definition
   * @generated
   */
  public Adapter createluname_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.keyref_definition <em>keyref definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.keyref_definition
   * @generated
   */
  public Adapter createkeyref_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.validate_action_reference <em>validate action reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.validate_action_reference
   * @generated
   */
  public Adapter createvalidate_action_referenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.statemachine_definition <em>statemachine definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.statemachine_definition
   * @generated
   */
  public Adapter createstatemachine_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.state_event_definition <em>state event definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.state_event_definition
   * @generated
   */
  public Adapter createstate_event_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.use_attributes_definition <em>use attributes definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.use_attributes_definition
   * @generated
   */
  public Adapter createuse_attributes_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.exclude_attributes_definition <em>exclude attributes definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.exclude_attributes_definition
   * @generated
   */
  public Adapter createexclude_attributes_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.tag_definition <em>tag definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.tag_definition
   * @generated
   */
  public Adapter createtag_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.tag_union_definition <em>tag union definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.tag_union_definition
   * @generated
   */
  public Adapter createtag_union_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.tag_minus_definition <em>tag minus definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.tag_minus_definition
   * @generated
   */
  public Adapter createtag_minus_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.tag_intersect_definition <em>tag intersect definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.tag_intersect_definition
   * @generated
   */
  public Adapter createtag_intersect_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.sync_policy_definition <em>sync policy definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.sync_policy_definition
   * @generated
   */
  public Adapter createsync_policy_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.batch_sync_policy_definition <em>batch sync policy definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.batch_sync_policy_definition
   * @generated
   */
  public Adapter createbatch_sync_policy_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.sync_schedule_definition <em>sync schedule definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.sync_schedule_definition
   * @generated
   */
  public Adapter createsync_schedule_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.batch_sync_hourly_policy <em>batch sync hourly policy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.batch_sync_hourly_policy
   * @generated
   */
  public Adapter createbatch_sync_hourly_policyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.batch_sync_daily_policy <em>batch sync daily policy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.batch_sync_daily_policy
   * @generated
   */
  public Adapter createbatch_sync_daily_policyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.batch_sync_weekly_policy <em>batch sync weekly policy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.batch_sync_weekly_policy
   * @generated
   */
  public Adapter createbatch_sync_weekly_policyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.batch_sync_weekday <em>batch sync weekday</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.batch_sync_weekday
   * @generated
   */
  public Adapter createbatch_sync_weekdayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.batch_sync_monthly_policy <em>batch sync monthly policy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.batch_sync_monthly_policy
   * @generated
   */
  public Adapter createbatch_sync_monthly_policyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.sync_group_definition <em>sync group definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.sync_group_definition
   * @generated
   */
  public Adapter createsync_group_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.filter_on_entity_setting <em>filter on entity setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.filter_on_entity_setting
   * @generated
   */
  public Adapter createfilter_on_entity_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.incoming_sync_policy_definition <em>incoming sync policy definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.incoming_sync_policy_definition
   * @generated
   */
  public Adapter createincoming_sync_policy_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.client_cache_sync_policy_definition <em>client cache sync policy definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.client_cache_sync_policy_definition
   * @generated
   */
  public Adapter createclient_cache_sync_policy_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.cache_invalidation_definition <em>cache invalidation definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.cache_invalidation_definition
   * @generated
   */
  public Adapter createcache_invalidation_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.cache_invalidation_after <em>cache invalidation after</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.cache_invalidation_after
   * @generated
   */
  public Adapter createcache_invalidation_afterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.online_only_sync_policy_definition <em>online only sync policy definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.online_only_sync_policy_definition
   * @generated
   */
  public Adapter createonline_only_sync_policy_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.push_sync_policy_definition <em>push sync policy definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.push_sync_policy_definition
   * @generated
   */
  public Adapter createpush_sync_policy_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.guard_condition_definition <em>guard condition definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.guard_condition_definition
   * @generated
   */
  public Adapter createguard_condition_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.ownership_query_definition <em>ownership query definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.ownership_query_definition
   * @generated
   */
  public Adapter createownership_query_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.exclude_details_setting <em>exclude details setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.exclude_details_setting
   * @generated
   */
  public Adapter createexclude_details_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.grouped_push_sync_policy_definition <em>grouped push sync policy definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.grouped_push_sync_policy_definition
   * @generated
   */
  public Adapter creategrouped_push_sync_policy_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.user_filter_reference <em>user filter reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.user_filter_reference
   * @generated
   */
  public Adapter createuser_filter_referenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.language_dependent_definition <em>language dependent definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.language_dependent_definition
   * @generated
   */
  public Adapter createlanguage_dependent_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.language_dependent_definition_language_dependent_type <em>language dependent definition language dependent type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.language_dependent_definition_language_dependent_type
   * @generated
   */
  public Adapter createlanguage_dependent_definition_language_dependent_typeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.change_detection_definition <em>change detection definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.change_detection_definition
   * @generated
   */
  public Adapter createchange_detection_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.trigger <em>trigger</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.trigger
   * @generated
   */
  public Adapter createtriggerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.trigger_attributes <em>trigger attributes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.trigger_attributes
   * @generated
   */
  public Adapter createtrigger_attributesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.trigger_attribute <em>trigger attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.trigger_attribute
   * @generated
   */
  public Adapter createtrigger_attributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.combine_attribute <em>combine attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.combine_attribute
   * @generated
   */
  public Adapter createcombine_attributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.trigger_attribute_table_columns <em>trigger attribute table columns</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.trigger_attribute_table_columns
   * @generated
   */
  public Adapter createtrigger_attribute_table_columnsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.mapping_arguments <em>mapping arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.mapping_arguments
   * @generated
   */
  public Adapter createmapping_argumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.objkey_column <em>objkey column</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.objkey_column
   * @generated
   */
  public Adapter createobjkey_columnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.target_table <em>target table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.target_table
   * @generated
   */
  public Adapter createtarget_tableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.objkey_mapping <em>objkey mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.objkey_mapping
   * @generated
   */
  public Adapter createobjkey_mappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.guard_function <em>guard function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.guard_function
   * @generated
   */
  public Adapter createguard_functionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.exclude_from_config_flag_setting <em>exclude from config flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.exclude_from_config_flag_setting
   * @generated
   */
  public Adapter createexclude_from_config_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.summary_definition <em>summary definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.summary_definition
   * @generated
   */
  public Adapter createsummary_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.query_definition <em>query definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.query_definition
   * @generated
   */
  public Adapter createquery_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.lu_definition <em>lu definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.lu_definition
   * @generated
   */
  public Adapter createlu_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.enumeration_definition <em>enumeration definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.enumeration_definition
   * @generated
   */
  public Adapter createenumeration_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.enumeration_type_definition <em>enumeration type definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.enumeration_type_definition
   * @generated
   */
  public Adapter createenumeration_type_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.enumeration_type_definition_enumeration_type <em>enumeration type definition enumeration type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.enumeration_type_definition_enumeration_type
   * @generated
   */
  public Adapter createenumeration_type_definition_enumeration_typeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.enumeration_value_definition <em>enumeration value definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.enumeration_value_definition
   * @generated
   */
  public Adapter createenumeration_value_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.exec_definition <em>exec definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.exec_definition
   * @generated
   */
  public Adapter createexec_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.label_definition <em>label definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.label_definition
   * @generated
   */
  public Adapter createlabel_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.user_filter_definition <em>user filter definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.user_filter_definition
   * @generated
   */
  public Adapter createuser_filter_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.view_filter_definition <em>view filter definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.view_filter_definition
   * @generated
   */
  public Adapter createview_filter_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.user_column_definition <em>user column definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.user_column_definition
   * @generated
   */
  public Adapter createuser_column_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.filter_columns_definition <em>filter columns definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.filter_columns_definition
   * @generated
   */
  public Adapter createfilter_columns_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.filter_column_definition <em>filter column definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.filter_column_definition
   * @generated
   */
  public Adapter createfilter_column_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.filter_column_operator <em>filter column operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.filter_column_operator
   * @generated
   */
  public Adapter createfilter_column_operatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.filter_column_operator_filter_column_operator_name <em>filter column operator filter column operator name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.filter_column_operator_filter_column_operator_name
   * @generated
   */
  public Adapter createfilter_column_operator_filter_column_operator_nameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.null_image <em>null image</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.null_image
   * @generated
   */
  public Adapter createnull_imageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.null_image_null_match <em>null image null match</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.null_image_null_match
   * @generated
   */
  public Adapter createnull_image_null_matchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.trigger_on_definition <em>trigger on definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.trigger_on_definition
   * @generated
   */
  public Adapter createtrigger_on_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.action_definition <em>action definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.action_definition
   * @generated
   */
  public Adapter createaction_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.type_definition <em>type definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.type_definition
   * @generated
   */
  public Adapter createtype_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.implementation_definition <em>implementation definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.implementation_definition
   * @generated
   */
  public Adapter createimplementation_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.dependency_definition <em>dependency definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.dependency_definition
   * @generated
   */
  public Adapter createdependency_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.server_package_reference <em>server package reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.server_package_reference
   * @generated
   */
  public Adapter createserver_package_referenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.dependencies_definition <em>dependencies definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.dependencies_definition
   * @generated
   */
  public Adapter createdependencies_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.mandatory_flag_setting <em>mandatory flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.mandatory_flag_setting
   * @generated
   */
  public Adapter createmandatory_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.projection_flag_condition <em>projection flag condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.projection_flag_condition
   * @generated
   */
  public Adapter createprojection_flag_conditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.projection_flag_condition_atom <em>projection flag condition atom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.projection_flag_condition_atom
   * @generated
   */
  public Adapter createprojection_flag_condition_atomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.projection_flag_condition_atom_value <em>projection flag condition atom value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.projection_flag_condition_atom_value
   * @generated
   */
  public Adapter createprojection_flag_condition_atom_valueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.parameter_definition <em>parameter definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.parameter_definition
   * @generated
   */
  public Adapter createparameter_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.available_flag_setting <em>available flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.available_flag_setting
   * @generated
   */
  public Adapter createavailable_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.transaction_group_definition <em>transaction group definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.transaction_group_definition
   * @generated
   */
  public Adapter createtransaction_group_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.offline_sync_policy_definition <em>offline sync policy definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.offline_sync_policy_definition
   * @generated
   */
  public Adapter createoffline_sync_policy_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.support_warnings_flag_setting <em>support warnings flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.support_warnings_flag_setting
   * @generated
   */
  public Adapter createsupport_warnings_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.function_definition <em>function definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.function_definition
   * @generated
   */
  public Adapter createfunction_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.based_on_entity_set_definition <em>based on entity set definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.based_on_entity_set_definition
   * @generated
   */
  public Adapter createbased_on_entity_set_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.support_file_info_flag <em>support file info flag</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.support_file_info_flag
   * @generated
   */
  public Adapter createsupport_file_info_flagAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.from_definition <em>from definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.from_definition
   * @generated
   */
  public Adapter createfrom_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.alter_attribute_definition <em>alter attribute definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.alter_attribute_definition
   * @generated
   */
  public Adapter createalter_attribute_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.fetch_definition <em>fetch definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.fetch_definition
   * @generated
   */
  public Adapter createfetch_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.complextype_definition <em>complextype definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.complextype_definition
   * @generated
   */
  public Adapter createcomplextype_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.virtual_definition <em>virtual definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.virtual_definition
   * @generated
   */
  public Adapter createvirtual_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.warnings_enabled_flag <em>warnings enabled flag</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.warnings_enabled_flag
   * @generated
   */
  public Adapter createwarnings_enabled_flagAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.keys_definition <em>keys definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.keys_definition
   * @generated
   */
  public Adapter createkeys_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.crud_definition <em>crud definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.crud_definition
   * @generated
   */
  public Adapter createcrud_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.crud_reference <em>crud reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.crud_reference
   * @generated
   */
  public Adapter createcrud_referenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.dataitem_definition <em>dataitem definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.dataitem_definition
   * @generated
   */
  public Adapter createdataitem_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.enum_lookup_list_flag_setting <em>enum lookup list flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.enum_lookup_list_flag_setting
   * @generated
   */
  public Adapter createenum_lookup_list_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.default_data_definition <em>default data definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.default_data_definition
   * @generated
   */
  public Adapter createdefault_data_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.regexp_definition <em>regexp definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.regexp_definition
   * @generated
   */
  public Adapter createregexp_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.maxlength_definition <em>maxlength definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.maxlength_definition
   * @generated
   */
  public Adapter createmaxlength_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.format_definition <em>format definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.format_definition
   * @generated
   */
  public Adapter createformat_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.inline_property_setting <em>inline property setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.inline_property_setting
   * @generated
   */
  public Adapter createinline_property_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.lov_flag_setting <em>lov flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.lov_flag_setting
   * @generated
   */
  public Adapter createlov_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.updatable_flag_setting <em>updatable flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.updatable_flag_setting
   * @generated
   */
  public Adapter createupdatable_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.server_updatable_flag_setting <em>server updatable flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.server_updatable_flag_setting
   * @generated
   */
  public Adapter createserver_updatable_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.server_insertable_flag_setting <em>server insertable flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.server_insertable_flag_setting
   * @generated
   */
  public Adapter createserver_insertable_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.validation_definition <em>validation definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.validation_definition
   * @generated
   */
  public Adapter createvalidation_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.implementation_type_definition <em>implementation type definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.implementation_type_definition
   * @generated
   */
  public Adapter createimplementation_type_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.stream_file_info_definition <em>stream file info definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.stream_file_info_definition
   * @generated
   */
  public Adapter createstream_file_info_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.stream_file_name_attribute <em>stream file name attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.stream_file_name_attribute
   * @generated
   */
  public Adapter createstream_file_name_attributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.stream_mime_type_attribute <em>stream mime type attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.stream_mime_type_attribute
   * @generated
   */
  public Adapter createstream_mime_type_attributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.stream_attachment_attribute <em>stream attachment attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.stream_attachment_attribute
   * @generated
   */
  public Adapter createstream_attachment_attributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.dataitem_reference <em>dataitem reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.dataitem_reference
   * @generated
   */
  public Adapter createdataitem_referenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.aggregate_definition <em>aggregate definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.aggregate_definition
   * @generated
   */
  public Adapter createaggregate_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.key_reference <em>key reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.key_reference
   * @generated
   */
  public Adapter createkey_referenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.to_reference_definition <em>to reference definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.to_reference_definition
   * @generated
   */
  public Adapter createto_reference_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.to_function_definition <em>to function definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.to_function_definition
   * @generated
   */
  public Adapter createto_function_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.prefetch_definition <em>prefetch definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.prefetch_definition
   * @generated
   */
  public Adapter createprefetch_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.copy_definition <em>copy definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.copy_definition
   * @generated
   */
  public Adapter createcopy_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.where_filter_definition <em>where filter definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.where_filter_definition
   * @generated
   */
  public Adapter createwhere_filter_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.aggregate_list_flag_setting <em>aggregate list flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.aggregate_list_flag_setting
   * @generated
   */
  public Adapter createaggregate_list_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.aggregate_check_flag_setting <em>aggregate check flag setting</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.aggregate_check_flag_setting
   * @generated
   */
  public Adapter createaggregate_check_flag_settingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.aggregate_wildcard_definition <em>aggregate wildcard definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.aggregate_wildcard_definition
   * @generated
   */
  public Adapter createaggregate_wildcard_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.array_definition <em>array definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.array_definition
   * @generated
   */
  public Adapter createarray_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.filtering_context_definition <em>filtering context definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.filtering_context_definition
   * @generated
   */
  public Adapter createfiltering_context_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.filtering_context_property <em>filtering context property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.filtering_context_property
   * @generated
   */
  public Adapter createfiltering_context_propertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.abstract_def <em>abstract def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.abstract_def
   * @generated
   */
  public Adapter createabstract_defAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.dynamic_component_dependency <em>dynamic component dependency</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.dynamic_component_dependency
   * @generated
   */
  public Adapter createdynamic_component_dependencyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.xtext.langserver.example.myDsl.identifier <em>identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.xtext.langserver.example.myDsl.identifier
   * @generated
   */
  public Adapter createidentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyDslAdapterFactory
